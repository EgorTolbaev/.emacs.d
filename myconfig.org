#+AUTHOR: Egor Tolbaev
#+TITLE: GNU Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Table of Contents                                                   :TOC_3:
- [[#about][About]]
- [[#startup-performance][Startup Performance]]
- [[#переменные-ос][Переменные ОС]]
- [[#package-system-setup][Package System Setup]]
- [[#keep-emacsd-clean][Keep .emacs.d Clean]]
- [[#general-settings][General settings]]
  - [[#defaults][Defaults]]
  - [[#fonts][Fonts]]
  - [[#кодировка][Кодировка]]
  - [[#парные-элементы][Парные элементы]]
  - [[#перенос-по-словам][Перенос по словам]]
  - [[#чистим-пробелы][Чистим пробелы]]
  - [[#отключить-сохранений][Отключить сохранений]]
  - [[#auto-mode-alist][Auto mode alist]]
  - [[#edit-this-configuration-file-shortcut][Edit This Configuration File Shortcut]]
- [[#ui][UI]]
  - [[#theme][Theme]]
  - [[#переключение-темы][Переключение темы]]
    - [[#светлая-тема][Светлая тема]]
    - [[#темная-тема][Темная тема]]
  - [[#modeline][Modeline]]
  - [[#icons][Icons]]
  - [[#отображение-времени][Отображение времени]]
  - [[#настройка-фрейма][Настройка фрейма]]
  - [[#golden-ratio][Golden ratio]]
  - [[#highlight-indent-guides][Highlight indent guides]]
    - [[#commands][Commands]]
    - [[#settings][Settings]]
- [[#office][Office]]
  - [[#org-mode][Org mode]]
    - [[#commands-1][Commands]]
    - [[#описание-рабочего-процесса][Описание рабочего процесса]]
    - [[#basic-config][Basic Config]]
    - [[#настройка-org-protocol][Настройка org-protocol]]
    - [[#capture][Capture]]
    - [[#org-roam][Org-roam]]
    - [[#org-roam-ui][Org-roam-ui]]
    - [[#org-bullets][Org bullets]]
    - [[#center-org-buffers][Center Org Buffers]]
    - [[#toc-org][Toc org]]
    - [[#block-templates][Block Templates]]
    - [[#quick-file-access][Quick file access]]
    - [[#auto-tangle-configuration-files][Auto-tangle Configuration Files]]
  - [[#markdown][Markdown]]
- [[#file-management][File Management]]
  - [[#dired][Dired]]
    - [[#commands-2][Commands]]
    - [[#settings-1][Settings]]
  - [[#deft][Deft]]
    - [[#commands-3][Commands]]
    - [[#settings-2][Settings]]
- [[#modes][Modes]]
  - [[#ivy][IVY]]
    - [[#commands-4][Commands]]
    - [[#settings-3][Settings]]
  - [[#ivy-rich][IVY-RICH]]
  - [[#counsel][COUNSEL]]
  - [[#helpful][Helpful]]
  - [[#which-key][Which Key]]
- [[#general-packages][General packages]]
  - [[#bs][BS]]
  - [[#dashboard][Dashboard]]
  - [[#reverse-im][Reverse-im]]
  - [[#browser][Browser]]
    - [[#engine-mode][Engine-mode]]
  - [[#hydra][Hydra]]
    - [[#commands-5][Commands]]
    - [[#settings-hydra][Settings Hydra]]
    - [[#hydra--browser][Hydra / Browser]]
    - [[#hydra--treemacs][Hydra / Treemacs]]
    - [[#hydra--theme][Hydra / Theme]]
    - [[#hydra--org][Hydra / Org]]
    - [[#hydra--windows][Hydra / Windows]]
    - [[#hydra--text][Hydra / Text]]
    - [[#hydra--file-gtd][Hydra / File GTD]]
- [[#development][Development]]
  - [[#languages][Languages]]
    - [[#ide-features-with-lsp-mode][IDE Features with lsp-mode]]
    - [[#debugging-with-dap-mode][Debugging with dap-mode]]
    - [[#typescript-and-javascript][TypeScript and JavaScript]]
    - [[#python][Python]]
    - [[#csharp][CSharp]]
    - [[#company-mode][Company Mode]]
    - [[#web-mode][Web mode]]
    - [[#json][JSON]]
    - [[#yaml][YAML]]
    - [[#makefile][Makefile]]
  - [[#buildsystem][Buildsystem]]
    - [[#docker][Docker]]
  - [[#projectile][Projectile]]
    - [[#commands-6][Commands]]
    - [[#settings-4][Settings]]
  - [[#magit][Magit]]
    - [[#commands-7][Commands]]
    - [[#settings-5][Settings]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
- [[#terminals][Terminals]]
  - [[#eshell][Eshell]]

* About

#+begin_src emacs-lisp

  ;;; init.el --- Initialisation file for GNU Emacs

  ;; Copyright © 2020-2022 Egor Tolbaev <egor05.09.97@gmail.com>

  ;; Author: Egor Tolbaev <egor05.09.97@gmail.com>
  ;; URL: https://github.com/EgorTolbaev/.emacs.d
  ;; Keywords: emacs, init, init.el, dotfiles

  ;; This file is NOT part of GNU Emacs.

  ;;; Commentary:
  ;;
  ;; I decided to create my own GNU Emacs configuration
  ;; to simplify my daily life by adding scripts and useful features.
  ;; This configuration does not claim to be ideal and is in constant development, but it is fully operational.
  ;; This file is generated based on myconfig.org

  ;;; Code:

#+end_src

Я решил создать свою собственную конфигурацию GNU Emacs, что бы упростить мою повседневную жизнь, добавив сценарии и полезные функции.

Для управления конфигурациями пакетов я использую пакет use-package от John Wiegley.

Этот файл генерирует [[https://github.com/EgorTolbaev/.emacs.d/blob/master/init.el][init.el]] который будет загружен GNU Emacs при запуске.

* Startup Performance

Ускорьте запуск, уменьшив частоту сборки мусора.

#+begin_src emacs-lisp

  (setq gc-cons-threshold (* 50 1000 1000))

#+end_src

* Переменные ОС

Некоторые части конфигурации отличаются в зависимости от системы, поэтому я определил функции для дальнейшего использовани.

#+begin_src emacs-lisp

  (defun system-is-linux()
    (string-equal system-type "gnu/linux"))
  (defun system-is-windows()
    (string-equal system-type "windows-nt"))

#+end_src

* Package System Setup

[[https://github.com/jwiegley/use-package][use-package]] - упрощает установку пакетов.

#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
      (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Keep .emacs.d Clean

Переносим переменные, созданные Custom в отдельный файл.

#+begin_src emacs-lisp

  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))

#+end_src

* General settings

** Defaults

Для лучшего взаимодействия с GNU Emacs я использую следующие значения по умолчанию.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  ;; (setq ring-bell-function 'ignore)              ; Отключить звуковой сигнал
  (blink-cursor-mode -1)                            ; Курсор не мигает
  (fset 'yes-or-no-p 'y-or-n-p)                     ; Замена yes-or-on на y-or-n

  (menu-bar-mode -1)    ; Не показывать меню
  (scroll-bar-mode -1)  ; Не показывать полосу прокрутки
  (tool-bar-mode -1)    ; Не показывать панель инструментов

  (setq visible-bell t) ; Установите видимый звонок

  (setq user-full-name "Egor Tolbaev")              ; Имя пользователя
  (setq user-mail-address "egor05.09.97@gmail.com") ; Email пользователя

  ;; Показ номера строки стандартными средствами
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Отключить номера строк где они не нужны
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  org-agenda-mode-hook
                  treemacs-mode-hook
                  eww-mode-hook
                  calendar-mode-hook
                  deft-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Fonts

Использую [[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]] или Consolas еще не решил:)

#+begin_src emacs-lisp

  (defvar et/default-font-size 110)
  ;;(set-face-attribute 'default nil :font "Consolas")
  (set-face-attribute 'default nil :font "Source Code Pro Medium" :height et/default-font-size)
  ;(set-fontset-font t 'latin "Noto Sans")
  (set-fontset-font t 'latin "Cantarell")

#+end_src

** Кодировка

#+begin_src emacs-lisp

  (set-language-environment 'UTF-8)
  (setq default-buffer-file-coding-system 'utf-8)
  (setq-default coding-system-for-read    'utf-8)
  (setq file-name-coding-system           'utf-8)
  (set-keyboard-coding-system        'utf-8-unix)
  (set-terminal-coding-system             'utf-8)
  (prefer-coding-system                   'utf-8)

#+end_src

** Парные элементы

Теперь при вводе парного элемента типа "(" они автоматически закрываються

#+begin_src emacs-lisp

  (electric-pair-mode t)
  (show-paren-mode 1)

#+end_src

** Перенос по словам

Слова которые не помещаются по размеру фрейма переносится на другую сторку

#+begin_src emacs-lisp

  (setq word-wrap t)
  (global-visual-line-mode t)

#+end_src

** Чистим пробелы

При сохранение файла удаляются лишние пробелы в конце строки и файла.

#+begin_src emacs-lisp

  (add-hook 'before-save-hook '(lambda () (delete-trailing-whitespace)))

#+end_src

** Отключить сохранений

#+begin_src emacs-lisp

  (setq make-backup-files nil)        ; Не нужны файлы резервных копий
  (setq auto-save-list-file-name nil) ; Не нужны файлы .saves
  (setq auto-save-default nil)        ; Не хочу автосохранения

#+end_src

** Auto mode alist

#+begin_src emacs-lisp

    (setq auto-mode-alist
        (append
         '(("\\.el$"  . emacs-lisp-mode)
           ("\\.org$" . org-mode)
           ("\\.tex$" . latex-mode))))

#+end_src

** Edit This Configuration File Shortcut

#+begin_src emacs-lisp

  (defun edit-configs ()
    "Opens the README.org file."
    (interactive)
    (find-file "~/.emacs.d/myconfig.org"))

  (global-set-key (kbd "C-x e") #'edit-configs)

#+end_src

* UI

** Theme

Я использую темы [[https://github.com/hlissner/emacs-doom-themes][doom-themes]] в сочетании с [[https://github.com/EgorTolbaev/.emacs.d/blob/master/myconfig.org#modeline][doom-modeline]]. Для отображения значков в doom-modeline использую [[https://github.com/EgorTolbaev/.emacs.d/blob/master/myconfig.org#icons][all-the-icons]]

#+begin_src emacs-lisp

  (use-package doom-themes
    :config
      (load-theme 'doom-Iosvkem))

#+end_src

** Переключение темы

*** Светлая тема

#+begin_src emacs-lisp

  (defun set-light-theme()
    (interactive)
    (load-theme 'doom-opera-light))
    (global-set-key (kbd "<f8>") 'set-light-theme)

#+end_src

*** Темная тема

#+begin_src emacs-lisp

  (defun set-night-theme()
    (interactive)
    (load-theme 'doom-Iosvkem))
    (global-set-key (kbd "<f9>") 'set-night-theme)

#+end_src

** Modeline

GitHub: [[https://github.com/seagle0128/doom-modeline][doom-modeline]]

#+begin_src emacs-lisp

  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode))

#+end_src

** Icons

GitHub: [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]

Для того, чтобы значки работали, очень важно, чтобы Вы установили шрифты ресурсов, включенные в этот пакет.

=M-x all-the-icons-install-fonts=

/Для Windows эта функция предложит указать каталог для загрузки/, /чтобы вы могли установить их вручную/.

#+begin_src emacs-lisp

  (use-package all-the-icons)

#+end_src

** Отображение времени

#+begin_src emacs-lisp

  (setq display-time-24hr-format t) ; 24-часовой временной формат в mode-line
  (display-time-mode t)             ; показывать часы в mode-line
  (size-indication-mode t)          ; размер файла в %-ах

#+end_src

** Настройка фрейма

Устанавливаю прозрачность фрейма и разворачиваю окно по умолчанию.

/Что бы это было красиво следите за свои рабочим столом и окнами по зади фрейма GNU Emacs/

#+begin_src emacs-lisp

  (defun et/transparent-frame (bool)
    (if bool
        (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
      (set-frame-parameter (selected-frame) 'alpha '(100 . 100))))

  (et/transparent-frame t)

  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

** Golden ratio

GitHub: [[https://github.com/roman/golden-ratio.el][golden-ratio]]

Удобный способ работать с окнами, при перключении =golden-ratio= изменяет размер окна с которым работаете.

#+begin_src emacs-lisp

  (use-package golden-ratio
    :config
    (golden-ratio-mode 1))

#+end_src

** Highlight indent guides

GitHub: [[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]]

=highlight-indent-guides= - пакет для выделения уровней отступов в коде. С этом режимом так же включаю [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Hideshow.html][hs-minor-mode]] что позволяет скрывать/показывать блок кода.

*** Commands

| command       | key / ex command | description                      |
|---------------+------------------+----------------------------------|
| hs-hide-block | =C-c @ C-d=      | скрыть текущий блок              |
| hs-show-block | =C-c @ C-s=      | показать текущий блок            |
| hs-hide-all   | =C-c @ C-t=      | скрыть все блоки верхнего уровня |
| hs-show-all   | =C-c @ C-a=      | показать все блоки в буфере      |
|---------------+------------------+----------------------------------|

*** Settings

#+begin_src emacs-lisp

  (use-package highlight-indent-guides
    :hook ((prog-mode . highlight-indent-guides-mode)
           (prog-mode . hs-minor-mode))
    :config
    (setq highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-responsive 'top))

#+end_src

* Office

** Org mode

[[https://orgmode.org/][Org mode]] предназначен для ведения заметок, списков дел, планирования проектов и многого другого.

Описание: [[https://orgmode.org/manual/Handling-Links.html][org-store-link]], [[https://orgmode.org/manual/Capture.html][org-capture]], [[https://orgmode.org/manual/Agenda-Commands.html][org-agenda]]

*** Commands

| command                                 | key / ex command | description            |
|-----------------------------------------+------------------+------------------------|
| org-capture                             | =C-c c=          | создать заметку        |
| org-agenda                              | =C-c a=          | открыть agenda         |
| org-store-link                          | =C-c l=          | cоздать ссылку         |
| org-todo                                | =C-c C-t=        | изменить статус задачи |
| org-set-tags-command                    | =C-c C-q=        | поставить тег          |
| org-schedule                            | =C-c C-s=        | указать дату по плану  |
| org-deadline                            | =C-c C-d=        | указать дату дедлайна  |
| org-table-create-or-convert-from-region | =C-x pipe=       | создать таблицу        |
| calendar                                | -                | открыть календарь      |
|-----------------------------------------+------------------+------------------------|

*** Описание рабочего процесса
Вкратце опишу файлы и мой процесс работы с задачами.

*Важно*
Я не претендую на соблюдения всех принципов GTD, и не говорю что мой подход правильный, просто это работает для меня.

**** Файлы

У меня есть следующие файлы:

*inbox.org* - структуры у файла нет, это просто список все входящей информации, новые задачи, почта, статьи которые хочу прочитать и т.п;

*projects.org* - файл содержит задачи для выполнения которых требуеться больше чем одно действие. В нем есть два заголовка, "Дом" и "Работа";

*next_tasks.org* - так же как и projects.org содержит два заголовка, "Дом" и "Работа". По сути это просто список задач которые можно взять в работу;

*agenda.org* - у файла следующая структура:

+ Birthdays (Дни рождения)
+ Recurrent (Повторяющийся)
  + Scheduled (Запланированное)
  + Habits (Привычки)
+ Past (Прошли)
+ Future (Будущее)

Тут хронятся, дни рождения, привычки которые я хочу отслеживать, какие-то ежедневные задачи или рабочие встречи, а так же все что имеет конкретную запланированную дат;

*waiting.org* - хранит в себе список делегированных или чего то ожидающих задач;

*journal.org* - журнал дня, в нем я отслеживаю задачи которыми занимался в конкретный день, затраченное время на задачу, а также могу сделать заметку на этот день.

Структра:

+ Год
  + Месяц
    + День
      + Заметки
      + Задачи

*notes.org* - просто заметки или заметки к конкретной задаче, встречи;
*soeday.org* - несрочные задачи, в основном нерабочие, которые хотелось бы сделать, но не сейчас.

**** Процесс

С помощью org-capture добавляю задачу, письмо и т.п в inbox.org;
При разборе inbox.org принимаю решения куда дальше это задача попадет в projects.org или next_tasks.org. Если задача попала в projects.org, то разбиваю ее на подзадачи, если в next_tasks.org задача просто ждет своего часа. Также на этом шаге добавляю теги к задаче если они нужны;
Беру задачу в работу, переношу или делаю ссылку в journal.org. В journal.org в момент когда начинаю работу над задачей простовляю статус задачи и запускаю таймер, в конце дня, месяца и года строю таблицу затраченного времени.

*** Basic Config

Этот раздел содержит базовую конфигурацию =org-mode=, а также конфигурацию для повестоки дня.

#+begin_src emacs-lisp

  (use-package org
    :config
    (setq org-ellipsis " ▾")
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)  ; Заметки с отметкой времени
    (setq org-log-into-drawer t)
    (when (system-is-windows)
      (setq org-agenda-files '(;; Файлы GTD
			       "c:/Users/user/Dropbox/GTD/next_tasks.org"
			       "c:/Users/user/Dropbox/GTD/projects.org"
			       "c:/Users/user/Dropbox/GTD/journal.org"
			       "c:/Users/user/Dropbox/GTD/agenda.org"
			       "c:/Users/user/Dropbox/GTD/waiting.org"))
      (set 'inbox_file "c:/Users/user/Dropbox/GTD/inbox.org"))
    (when (system-is-linux)
      (setq org-agenda-files '(;; Файлы GTD
			       "~/Dropbox/GTD/next_tasks.org"
			       "~/Dropbox/GTD/projects.org"
			       "~/Dropbox/GTD/journal.org"
			       "~/Dropbox/GTD/agenda.org"
			       "~/Dropbox/GTD/waiting.org"))
      (set 'inbox_file "~/Dropbox/GTD/inbox.org"))


    (setq org-refile-targets
	  '(("inbox.org" :maxlevel . 1)
	    ("projects.org" :maxlevel . 1)
	    ("journal.org" :maxlevel . 4)
	    ("someday.org" :maxlevel . 1)
	    ("next_tasks.org" :maxlevel . 1)
	    ("waiting.org" :maxlevel . 1)
	    ("agenda.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords '((sequence "TODO(t)"
					"IN-PROGRESS(s)"
					"PAUSE(p@/!)"
					"NEXT(n@)"
					"ACTIVE(a)"
					"WAITING(w@/!)""|" "DONE(d!)" "CANCEL(c@)")))
    (setq org-tag-alist
	  '((:startgroup)
					  ; Put mutually exclusive tags here
	    (:endgroup)
	    ("@home" . ?H)
	    ("@work" . ?W)
	    ("meeting" .?m)
	    ("day" . ?d)
	    ("projects" . ?p)
	    ("next" . ?n)
	    ("waiting" . ?g)
	    ("sprint" .?s)))

    (setq org-agenda-custom-commands
	  '(("d" "Dashboard"
	     ((agenda "" ((org-agenda-span 0)))
	      (tags-todo "+TODO=\"TODO\"-habits"
			 ((org-agenda-overriding-header "TODO")))
	      (todo "IN-PROGRESS"
		    ((org-agenda-overriding-header "IN-PROGRESS")))
	      (todo "WAITING"
		    ((org-agenda-overriding-header "WAITING")))
	      (todo "PAUSE"
		    ((org-agenda-overriding-header "PAUSE")))
	      (todo "NEXT"
		    ((org-agenda-overriding-header "Next")))))

	    ("w" "Workflow Status"
	     ((tags-todo "projects"
			 ((org-agenda-overriding-header "Projects")
			  (org-agenda-files org-agenda-files)))
	      (tags-todo "next"
			 ((org-agenda-overriding-header "Next")
			  (org-agenda-files org-agenda-files)))
	      (tags-todo "waiting"
			 ((org-agenda-overriding-header "Waiting")
			  (org-agenda-files org-agenda-files)))))
	    ("s" "Sprint"
	     ((tags-todo "sprint"
			 ((org-agenda-overriding-header "Sprint")
			  (org-agenda-files org-agenda-files)))))

	    ("i" "Inbox"
	     ((todo "TODO"))((org-agenda-files (list inbox_file))))

	    ;; Low-effort next actions
	    ("e" tags-todo "+TODO=\"TODO\"+Effort<15&+Effort>0"
	     ((org-agenda-overriding-header "Low Effort Tasks")
	      (org-agenda-max-todos 20)
	      (org-agenda-files org-agenda-files)))))

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t))))

  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda)

#+end_src

*** Настройка org-protocol

=Org-mode= имеет удобную функцию =org-protocol=, которая связана с =org-capture=.

=Org-protocol= позволяет делать захват статей или их частей пряма из браузера.

Это позволяет при чтении чего-либо в браузере сохранить ссылку и выделеный текст прямо в =org= файл который Вы указали.

Для самой простой настройки Вам нужно сделать следующее:

1) В свой config GNU Emacs  добавить вызов функции =server-start= и пакет =org-protocol=;
2) Добавить шаблон захвата (=org-capture-templates=)

   Пример простого шаблона:
  #+begin_src text
    ("c" "org-protocol-capture" entry (file capture_file)
    "* TODO [[%:link][%:description]]\n\n %i"
    :immediate-finish t)
  #+end_src
3) В браузере котором Вы работаете настроить Bookmarklet для вызова следующего JS кода:
   #+begin_src js

     javascript:location.href ='org-protocol://capture?template=c&url='+
         encodeURIComponent(location.href) +
         '&title=' + encodeURIComponent(document.title) +
         '&body=' + encodeURIComponent(window.getSelection())

   #+end_src
4) Зарегестрировать =org-protocl= в своей системе:

   - Windows

     Нужно создать обычный текстовый файл и добавить в него следующие строки

      #+begin_src bash

        REGEDIT4

        [HKEY_CLASSES_ROOT\org-protocol]
        @="URL:Org Protocol"
        "URL Protocol"=""
        [HKEY_CLASSES_ROOT\org-protocol\shell]
        [HKEY_CLASSES_ROOT\org-protocol\shell\open]
        [HKEY_CLASSES_ROOT\org-protocol\shell\open\command]
        @="\"C:\\emacs\\bin\\emacsclientw.exe\" \"%1\""

      #+end_src

      после сохранить файл с расширением =reg= и запустить.

      *Обратите внимание что строка* @"\"C:\\emacs\\bin\\emacsclientw.exe\" \"%1\"" *может отличаться, в зависимости куда был установлен GNU Emacs*

   - Linux

     Еще не настраивал:)

[[https://orgmode.org/worg/org-contrib/org-protocol.html#org379cab0][Подробно про настройку можно почитать тут]]

*** Capture

Я использую  =capture= для быстрого создания задач, заметок и другой организации дел.

На данный момент =capture= связан с =org-protocl=, смотрите пункт выше.

#+begin_src emacs-lisp

  (when (system-is-windows)
    (set 'gtd_inbox_file "c:/Users/user/Dropbox/GTD/inbox.org")
    (set 'gtd_journal_filel "c:/Users/user/Dropbox/GTD/journal.org")
    (set 'gtd_agenda_filel "c:/Users/user/Dropbox/GTD/agenda.org")
    (set 'gtd_notes_filel "c:/Users/user/Dropbox/GTD/notes.org")
    (set 'gtd_projects_filel "c:/Users/user/Dropbox/GTD/projects.org")
    (set 'gtd_someday_filel "c:/Users/user/Dropbox/GTD/someday.org")
    (set 'gtd_next_tasks_file "c:/Users/user/Dropbox/GTD/next_tasks.org")
    (set 'gtd_waiting_file "c:/Users/user/Dropbox/GTD/waiting.org"))
  (when (system-is-linux)
    (set 'inbox_file "~/Dropbox/GTD/inbox.org")
    (set 'journal_filel "~/Dropbox/GTD/journal.org")
    (set 'gtd_agenda_filel "~/Dropbox/GTD/agenda.org")
    (set 'gtd_notes_filel "~/Dropbox/GTD/notes.org")
    (set 'gtd_projects_filel "~/Dropbox/GTD/projects.org")
    (set 'gtd_someday_filel "~/Dropbox/GTD/someday.org")
    (set 'gtd_next_tasks_file "~/Dropbox/GTD/next_tasks.org")
    (set 'gtd_waiting_file "~/Dropbox/GTD/waiting.org"))

  (server-start)
  (require 'org-protocol)

  (setq org-capture-templates
	'(;; Захват задач в файл Inbox
	  ("i" "Inbox task")
	  ("ii" "Just a task (просто задача)" entry (file+olp gtd_inbox_file "Inbox")
	   "* TODO %?\n Entered on %U")
	  ("il" "Task with a link to a file (задача с ссылкой на файл))" entry (file+olp gtd_inbox_file "Inbox")
	   "* TODO %?\n Entered on %U \n %a")
	  ("im" "Meeting (собрание)" entry (file+olp gtd_agenda_filel "Future")
	   "* TODO %? :meeting: \n %^t %i")
	  ("is" "Schedule a task (запланировать задачу)" entry (file+olp gtd_inbox_file "Inbox")
	   "* TODO %? %^G \n SCHEDULED: %^t %i")
	  ("id" "Task with a deadline (задача с дедлайном)" entry (file+olp gtd_inbox_file "Inbox")
	   "* TODO %? %^G \n DEADLINE: %^t %i")
	  ;; Журнал дня
	  ("j" "Journal Entries")
	  ("jj" "Journal" entry (file+function gtd_journal_filel
					       (lambda ()
						 (org-datetree-find-date-create
						  (org-date-to-gregorian (org-today)) t)
						 (re-search-forward "^\\*.+ Day" nil t)))
	   "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n")
	  ("jd" "Tasks for the day" entry
	   (file+olp+datetree gtd_journal_filel)
	   "\n* Day \n* Meeting :meeting: \n* %<%Y-%m-%d %p> - Tasks for the day")
	  ;; Заметки
	  ("n" "Note")
	  ("nn" "Note with link" entry  (file gtd_notes_filel)
	   "* Note (%a)\n Entered on/ %U\n %?")
	  ("nj" "Just a note" entry  (file gtd_notes_filel)
	    "* Note %?\n  Entered on/ %U\n")
	  ;; Захват задач из внешних источников (браузер)
	  ("c" "org-protocol-capture" entry (file+olp gtd_inbox_file "Inbox")
	   "* TODO [[%:link][%:description]]\n\n %i"
	   :immediate-finish t)
	  ;; Захват выделенного региона, используеться в функции et/org-capture-inbox
	  ("e" "capturing a selected region" entry (file+olp gtd_inbox_file "Inbox")
	   "* TODO %?\n %a\n %i"
	   :immediate-finish t)))

  (defun et/org-capture-inbox ()
    "Записать выделенный регион в файл Inbox"
    (interactive)
    (org-capture nil "e"))

#+end_src

*** Org-roam

[[https://www.orgroam.com/][Org-roam]] - это система для управления вашими знаниями на основе org файлов. Удобный способ создать собственную wiki или просто управлять своими заметками.

**** Установка

***** Windows

Чтобы установить org-roam на OS Windows, Вам нужно устоновить компилятор =C= [[https://www.msys2.org/][MSYS2]] и в его терминале ввести команду:

#+begin_src bash

  pacman -S gcc

#+end_src

Далее нужно добавить пути, для этого в терминале введем следующие:

#+begin_src bash

  setx PATH "c:\msys64\mingw32\bin;c:\msys64\usr\bin;%PATH%"

#+end_src

Чтобы узнать подробней читайте [[https://www.orgroam.com/manual.html#C-Compiler][инструкцию]].

***** Linux

Еще не настроено:)

**** Commands

| command                             | key / ex command | description                              |
|-------------------------------------+------------------+------------------------------------------|
| org-roam-node-find                  | =C-c n f=        | открыть/создать узел                     |
| org-roam-node-insert                | =C-c n i=        | добавить ссылку на узел                  |
| org-roam-buffer-toggle              | =C-c n l=        | посмотреть связи между узлами            |
| completion-at-point                 | =C-M-i=          | автозавершение при вводе первых символов |
| org-id-get-create                   | -                | создать узел из заголовка                |
| org-roam-alias-add                  | -                | добавить alias узлу                      |
| org-roam-dailies-capture-today      | =C-c n d n=      | создать заметку на текущий день          |
| org-roam-dailies-goto-today         | =C-c n d d=      | перейти к заметкам текущего дня          |
| org-roam-dailies-capture-yesterday  | =C-c n d Y=      | создать заметку вчерашнего дня           |
| org-roam-dailies-capture-tomorrow   | =C-c n d T=      | создать заметку завтрашнего дня          |
| org-roam-dailies-capture-date       | =C-c n d v=      | создать заметку на определенную дату     |
| org-roam-dailies-goto-date          | =C-c n d c=      | перейти к файлу за конкретную дату       |
| org-roam-dailies-goto-next-note     | =C-c n d b=      | перейти к заметки вчерашнего дня         |
| org-roam-dailies-goto-previous-note | =C-c n d f=      | перейти к заметку завтрашнего дня        |
|-------------------------------------+------------------+------------------------------------------|

**** Settings

#+begin_src emacs-lisp

  (when (system-is-windows)
    (set 'path_org_roam "c:/Users/user/Dropbox/Braindump/main"))
  (when (system-is-linux)
    (set 'path_org_roam "~/Dropbox/Braindump/main"))

  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory path_org_roam)
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert)
	   :map org-mode-map
	   ("C-M-i" . completion-at-point)
	   :map org-roam-dailies-map
	   ("Y" . org-roam-dailies-capture-yesterday)
	   ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode)
    (cl-defmethod org-roam-node-type ((node org-roam-node))
      "Return the TYPE of NODE."
      (condition-case nil
	  (file-name-nondirectory
	   (directory-file-name
	    (file-name-directory
	     (file-relative-name (org-roam-node-file node) org-roam-directory))))
	(error ""))))

#+end_src

*** Org-roam-ui

GitHub: [[https://github.com/org-roam/org-roam-ui][org-roam-ui]]

=org-roam-ui= — это интерфейс для просмотра и взаимодействия с вашими заметками в [[https://github.com/EgorTolbaev/.emacs.d/blob/master/myconfig.org#Org-roam][Org-roam]].

Используйте =M-x org-roam-ui-mode RET= для включения глобального режима. Он запустит веб-сервер по адресу http://127.0.0.1:35901/ и подключится к нему через WebSocket для получения обновлений в реальном времени.

#+begin_src emacs-lisp

  (use-package org-roam-ui
    :after org-roam
    ;;normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;a hookable mode anymore, you're advised to pick something yourself
    ;;if you don't care about startup time, use
    ;;:hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+end_src

*** Org bullets

Github: [[https://github.com/sabof/org-bullets][org-bullets]]

=org-bullets= заменяет звездочки заголовков в буферах режима организации более красивыми символами.

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

Github: [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]]

Мне нравится когда файл в режим =org-mode= центрируется в буфере.

#+begin_src emacs-lisp

  (when (system-is-windows)
    (set 'center_org 130))
  (when (system-is-linux)
    (set 'center_org 150))

  (defun et/org-mode-visual-fill ()
      (setq visual-fill-column-width center_org
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1))

    (use-package visual-fill-column
      :hook (org-mode . et/org-mode-visual-fill))

#+end_src

*** Toc org

GitHub: [[https://github.com/snosov1/toc-org][toc-org]]


Удобный способ делать оглавления автоматически, просто в первом заголовке добавить тег :TOC:

#+begin_src emacs-lisp

  (use-package toc-org
    :after org
    :hook (org-mode . toc-org-enable))

#+end_src

*** Block Templates

Шаблоны позволяют вводить что-то вроде, =<el=, затем при нажатии =Tab= разворачиваеться шаблон.

#+begin_src emacs-lisp

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("cs" . "src csharp"))

#+end_src

*** Quick file access

В этом разделе собраны функции для быстрого доступа к файлам которые мне часто нужны.

#+begin_src emacs-lisp

  (defun et/open-inbox ()
    "Открыть файл Inbox"
    (interactive)
    (find-file gtd_inbox_file))

  (defun et/open-agenda ()
    "Открыть файл Agenda"
    (interactive)
    (find-file gtd_agenda_filel))

  (defun et/open-journal ()
    "Открыть файл Journal"
    (interactive)
    (find-file gtd_journal_filel))

  (defun et/open-notes ()
    "Открыть файл Notes"
    (interactive)
    (find-file gtd_notes_filel))

  (defun et/open-projects ()
    "Открыть файл Projects"
    (interactive)
    (find-file gtd_projects_filel))

  (defun et/open-someday ()
    "Открыть файл Someday"
    (interactive)
    (find-file gtd_someday_filel))

  (defun et/open-next-tasks ()
    "Открыть файл Someday"
    (interactive)
    (find-file gtd_next_tasks_file))

  (defun et/open-waiting ()
    "Открыть файл Someday"
    (interactive)
    (find-file gtd_waiting_file))

#+end_src
*** Auto-tangle Configuration Files

Каждый раз при сохранении =myconfig.org= экспортирует конфигурацию в =init.el=

#+begin_src emacs-lisp

  (when (system-is-windows)
    (defvar et/path-expand "./myconfig.org"))
  (when (system-is-linux)
    (defvar et/path-expand "~/.emacs.d/myconfig.org"))

  (defun et/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name et/path-expand))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'et/org-babel-tangle-config)))

#+end_src

** Markdown

[[https://jblevins.org/projects/markdown-mode/][Markdown Mode for GNU Emacs]]

Прежде чем использовать этот пакет, нужно убедиться что установлен какой то процессор Markdown

В моем конфиге это - [[https://github.com/jgm/pandoc][pandoc]]

#+begin_src emacs-lisp

  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "pandoc"))

#+end_src

* File Management

** Dired

Dired - это встроенный файловый менеджер для GNU Emacs.

/В OS Windows может быть не корректная сортировка файлов и дополнительная информация, это неприятно, но работе не мешает./

Для отображения icons в =Dired= использую [[#treemacs-icons][Treemacs Icons]].

*** Commands

| command    | key / ex command | description                  |
|------------+------------------+------------------------------|
| dired      | =C-x d=          | открыть                      |
| dired-jump | =C-x C-j=        | открыть dired текущего файла |
|------------+------------------+------------------------------|

=dired-single=

| command                   | key / ex command | description                      |
|---------------------------+------------------+----------------------------------|
| dired-single-up-directory | =h=              | вернуться назад в текущем буфере |
| dired-single-buffer       | =j=              | открыть в текущем буфере         |
|---------------------------+------------------+----------------------------------|

**** Навигация

| command                      | key / ex command | description                                 |
|------------------------------+------------------+---------------------------------------------|
| dired-next-line              | =n=              | cледующая строка                            |
| dired-previous-line          | =p=              | предыдущая строка                           |
| dired-goto-file              | =j=              | перейти к файлу в буфере                    |
| dired-find-file              | =RET=            | выберите файл или каталог                   |
| dired-up-directiry           | =^=              | перейти в родительский каталог              |
| dired-find-file-other-window | =o=              | открыть файл в «другом» окне                |
| dired-display-file           | =C-o=            | показать файл в другом окне без фокусировки |
| dired-view-file              | =v=              | предварительный просмотр                    |
| revert-buffer                | =g=              | обновить буфер                              |
|------------------------------+------------------+---------------------------------------------|

**** Маркировка файлов

| command                 | key / ex command | description                                             |
|-------------------------+------------------+---------------------------------------------------------|
| dired-mark              | =m=              | отметить файл                                           |
| dired-unmark            | =u=              | снять отметку                                           |
| dired-unmark-all-marks  | =U=              | снять отметку со всех файлов                            |
| dired-toggle-marks      | =* t= or =t=     | Инвертирует отмеченные файлы в буфере                   |
| dired-mark-files-regexp | =% m=            | Пометить файлы в буфере с помощью регулярного выражения |
|                         | =*=              | Множество других функций автоматической маркировки      |
| dired-do-kill-lines     | =k=              | «Убить» отмеченные предметы                             |
|-------------------------+------------------+---------------------------------------------------------|

**** Копирование и переименование файлов

| command                | key / ex command | description                                         |
|------------------------+------------------+-----------------------------------------------------|
| dired-do-copy          | =C=              | скопировать файл                                    |
| dired-do-rename        | =R=              | переименовать файл                                  |
| dired-do-rename-regexp | =% R=            | Переименовать на основе регулярного выражения ^test |
|------------------------+------------------+-----------------------------------------------------|

**** Удаление файлов

| command                   | key / ex command | description                    |
|---------------------------+------------------+--------------------------------|
| dired-do-delete           | =D=              | Удалить отмеченный файл        |
| dired-flag-file-deletion  | =d=              | Отметить файл для удаления     |
| dired-do-flagged-delete   | =x=              | Выполнить удаление для отметок |
| delete-by-moving-to-trash | -                | Переместить в корзину          |
|---------------------------+------------------+--------------------------------|

**** Создание и распаковка архивов

| command                    | key / ex command | description                                       |
|----------------------------+------------------+---------------------------------------------------|
| dired-do-compress          | =Z=              | Сжать или распаковать файл или папку в ( .tar.gz) |
| dired-do-compress          | =c=              | Сжать выделение в конкретный файл                 |
| dired-compress-files-alist | -                | Привязать команды сжатия к расширению файла       |
|----------------------------+------------------+---------------------------------------------------|

**** Другие общие операции

| command          | key / ex command | description                                |
|------------------+------------------+--------------------------------------------|
| dired-do-touch   | =T=              | Коснитесь (изменить отметку времени)       |
| dired-do-chmod   | =M=              | Изменить режим файла                       |
| dired-do-chown   | =O=              | Сменить владельца файла                    |
| dired-do-chgrp   | =G=              | Изменить группу файлов                     |
| dired-do-symlink | =S=              | Создайте символическую ссылку на этот файл |
| dired-do-load    | =L=              | Загрузить файл GNU Emacs Lisp в GNU Emacs  |
|------------------+------------------+--------------------------------------------|


*** Settings

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (define-key dired-mode-map "h"
      'dired-single-up-directory)
    (define-key dired-mode-map "l"
      'dired-single-buffer))

  (use-package dired-single)

  ;; (use-package all-the-icons-dired
  ;;   :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

** Deft

GitHub: [[https://github.com/jrblevin/deft][Deft]]

Deft — это режим GNU Emacs для быстрого просмотра, фильтрации и редактирования каталогов простых текстовых заметок, вдохновленный Notational Velocity.

*** Commands

| command                        | key / ex command | description                                                  |
|--------------------------------+------------------+--------------------------------------------------------------|
| deft-open-file-other-window    | =C-o=            | открыть файл в другом окне не меня фокуса                    |
| deft-open-file-other-window    | =C-u C-o=        | открыть файл в другом окне переключившись на него            |
| deft-filter-clear              | =С-с С-с=        | очистить фильтр поиска                                       |
| deft-filter                    | =C-c C-l=        | редактировать строку поиска                                  |
|                                | =M-p= and =M-n=  | история поиска в режиме редактирования строки поиска         |
| deft-toggle-incremental-search | =C-c C-t=        | переключение между обычным поиском и по регулярным выражения |
| deft-rename-file               | =C-c C-r=        | переименовать файл                                           |
| deft-delete-file               | =С-с С-d=        | удалить файл                                                 |
| deft-new-file                  | =C-c C-n=        | создать файл                                                 |
| deft-archive-file              | =C-c C-a=        | переместить файл в архив                                     |
|                                | =C-c C-q=        | закрыть deft                                                 |
|--------------------------------+------------------+--------------------------------------------------------------|

*** Settings

#+begin_src emacs-lisp

  (when (system-is-windows)
    (setq et/deft-dir-list '("c:/Users/user/Dropbox/Braindump/main"
                             "c:/Users/user/Dropbox/GTD/")))
  (when (system-is-linux)
    (setq et/deft-dir-list '("~/Dropbox/Braindump/main"
                             "~/Dropbox/GTD/")))

  (use-package deft
    :config (setq deft-directory "c:/Users/user/Dropbox/Braindump/main"
                  deft-extensions '("md" "org"))
    (setq deft-use-filename-as-title t))

  (defun et/pick-deft-dir ()
    "Select directories from a list"
    (interactive)
    (setq deft-directory
          (ido-completing-read "Select directory: " et/deft-dir-list))
    (deft-refresh))

#+end_src
* Modes
** IVY

[[https://github.com/abo-abo/swiper/tree/7cdde66c95d5205287e88010bc7a3a978c931db0][Ivy]] - это общий механизм завершения для GNU Emacs. Использую в месте с [[https://github.com/EgorTolbaev/.emacs.d/blob/master/myconfig.org#ivy-rich][ivy-rich]] и [[https://github.com/EgorTolbaev/.emacs.d/blob/master/myconfig.org#counsel][counsel]]

*** Commands

| command                | key / ex command | description                     |
|------------------------+------------------+---------------------------------|
| swiper                 | =C-s=            | открыть поиск                   |
| ivy-alt-done           | =TAB= or =C-l=   | выйти из буфера                 |
| ivy-next-line          | =С-j= or =C-n=   | cледующая строка                |
| ivy-previous-line      | =C-k= or =C-p=   | предыдущая строка               |
| ivy-switch-buffer-kill | =C-d=            | выти из буфера reverse-i-search |
| counsel-switch-buffer  | =C-M-j=          | переключение буферов с превью   |
|------------------------+------------------+---------------------------------|

*** Settings

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (global-set-key (kbd "C-M-j") 'counsel-switch-buffer)

#+end_src

** IVY-RICH

#+begin_src emacs-lisp

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

#+end_src

** COUNSEL

#+begin_src emacs-lisp

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
          :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

#+end_src

** Helpful

GitHub: [[https://github.com/Wilfred/helpful][helpful]]

Helpful - это альтернатива встроенной справке GNU Emacs, которая предоставляет гораздо больше контекстной информации.

#+begin_src emacs-lisp

  (use-package helpful
    :custom
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
    :bind
      ([remap describe-function] . counsel-describe-function)
      ([remap describe-command] . helpful-command)
      ([remap describe-variable] . counsel-describe-variable)
      ([remap describe-key] . helpful-key))

#+end_src

** Which Key

GitHub: [[https://github.com/justbur/emacs-which-key][which-key]]

which-key- это второстепенный режим для GNU Emacs, который отображает привязки клавиш после введенной вами неполной команды (префикса) во всплывающем окне.

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
      (setq which-key-idle-delay 1))

#+end_src

* General packages

** BS

GitHub: [[https://github.com/emacs-mirror/emacs/blob/master/lisp/bs.el][bs]]

Меню для выбора и отображения буферов

#+begin_src emacs-lisp

  (use-package bs)

  ;; Добавим чтобы в буфере всегда был scratch
  (setq bs-configurations
      '(("files" "^\\*scratch\\*" nil nil bs-visits-non-file bs-sort-buffer-interns-are-last)))

  (global-set-key (kbd "<f2>") 'bs-show)

#+end_src

** Dashboard

GitHub: [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]]

Расширяемый стартовый экран GNU Emacs.

#+begin_src emacs-lisp

  (use-package dashboard
    :init
    (progn
      (setq dashboard-startup-banner "~/.emacs.d/images/ET_Light_Small.png")
      (setq dashboard-items '((recents  . 5)
                              (projects . 5)
                              (agenda . 5)))
      (setq dashboard-show-shortcuts nil)
      (setq dashboard-center-content t)
      (setq dashboard-set-file-icons t)
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-init-info t ))
    :config
    (dashboard-setup-startup-hook)
    :custom
    (dashboard-banner-logo-title "Good Hack")
    ;; Кнопки навигации
    (dashboard-set-navigator t)
    (dashboard-navigator-buttons
     (if (featurep 'all-the-icons)
         `(((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
             "Homepage" "Browse homepage"
             (lambda (&rest _) (browse-url "https://github.com/EgorTolbaev")))
            (,(all-the-icons-fileicon "elisp" :height 1.1 :v-adjust -0.1)
             "Configuration" "" (lambda (&rest _) (edit-configs)))))
       `((("" "Homepage" "Browse homepage"
           (lambda (&rest _) (browse-url "https://github.com/EgorTolbaev")))
          ("" "Configuration" "" (lambda (&rest _) (edit-configs)))))))
    ;; Настройки dashboard-agenda для показа с определенным тегом и статусом
    (dashboard-filter-agenda-entry 'dashboard-filter-agenda-by-todo)
    (dashboard-match-agenda-entry "day|@work"
      dashboard-match-next-entry "TODO=\"TODO\"|TODO=\"IN-PROGRESS\"|TODO=\"PAUSE\""))

#+end_src

** Reverse-im

GitHub: [[https://github.com/emacsmirror/reverse-im][reverse-im]]

Переопределяет функциональную-клавишную-карту для предпочтительных методов ввода для перевода входных последовательностей на английский язык.

#+begin_src emacs-lisp

  (use-package reverse-im
    :custom
      (reverse-im-input-methods '("russian-computer"))
    :config
      (reverse-im-mode t))

#+end_src

** Browser

Я решил использовать в связке с GNU Emacs браузер, ориентированный на клавиатуру, с минимальным графическим интерфейсом [[https://github.com/qutebrowser/qutebrowser][Qutebrowser]]

При установки qutebrowser на Windows возможно потребуеться вручную добавить путь в переменную $path = C:\Program Files\qutebrowser

#+begin_src emacs-lisp

  (use-package browse-url
    :ensure nil
    :custom
      (browse-url-browser-function 'browse-url-generic)
      (browse-url-generic-program "qutebrowser"))

#+end_src

*** Engine-mode

Github: [[https://github.com/hrs/engine-mode/tree/e0910f141f2d37c28936c51c3c8bb8a9ca0c01d1][engine-mode]]

Удобный способ совершать поиск не выходя из GNU Emacs

**** Commands

| command                     | key / ex command | description             |
|-----------------------------+------------------+-------------------------|
| engine/keymap-prefix        | =C-x /=          | открыть буфер команд    |
| engine/search-duckduckgo    | =C-x / d=        | поиск в duckduckgo      |
| engine/search-github        | =C-x / g=        | поиск в GitHub          |
| engine/search-google-images | =C-x / i=        | поиск картинок в google |
| engine/search-youtube       | =C-x / y=        | поиск в youtube         |
|-----------------------------+------------------+-------------------------|


**** Settings

#+begin_src emacs-lisp

  (use-package engine-mode
    :defer 3
    :config
      (defengine duckduckgo
        "https://duckduckgo.com/?q=%s"
	:keybinding "d")

      (defengine github
        "https://github.com/search?ref=simplesearch&q=%s"
	:keybinding "g")

      (defengine google-images
        "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
	:keybinding "i")

      (defengine youtube
        "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
	:keybinding "y")

    (engine-mode t))

#+end_src

** Hydra

GitHub: [[https://github.com/abo-abo/hydra][hydra]], [[https://github.com/jerrypnz/major-mode-hydra.el][major-mode-hydra]]

=hydra= позволяет сделать меню с командами и всплывающем окне отображать их. Это удобно когда вам нужно группировать команды или просто не запоменать все хоткеии, а подсматривать в подсказку.

*** Commands

| command                     | key / ex command     | description                     |
|-----------------------------+----------------------+---------------------------------|
| Браузер                     |                      |                                 |
| hydra-browser/body          | =C-c b=              | hydra браузера                  |
| engine/search-duckduckgo    | =C-c b d=            | поиск в duckduckgo              |
| engine/search-google-images | =C-c b i=            | поиск картинок в google         |
| engine/search-youtubes      | =C-c b y=            | поиск в youtube                 |
| engine/search-githu         | =C-c b g=            | поиск в GitHub                  |
|-----------------------------+----------------------+---------------------------------|
|-----------------------------+----------------------+---------------------------------|
| Treemacs                    |                      |                                 |
| hydra-treemacs/body         | =C-c t=              | hydra treemac                   |
| treemacs                    | =C-c t t=            | treemac                         |
| lsp-treemacs-symbols        | =C-c t s=            | treemacs ymbols                 |
|-----------------------------+----------------------+---------------------------------|
|-----------------------------+----------------------+---------------------------------|
| Настройка темы              |                      |                                 |
| hydra-theme/body            | =C-c s=              | hydra theme                     |
| counsel-load-theme          | =C-c s a=            | посмотреть все темы             |
| set-night-theme             | =C-c s d=            | установить темную тему          |
| set-light-theme             | =C-c s l=            | установить светлую тему         |
| (et/transparent-frame t)    | =C-c s p=            | прозрачный фрейм                |
| (et/transparent-frame nil)  | =C-c s n=            | не прозрачный фрейм             |
|-----------------------------+----------------------+---------------------------------|
|-----------------------------+----------------------+---------------------------------|
| Org                         |                      |                                 |
| hydra-org/body              | =C-c o=              | hydra org                       |
| org-insert-link-global      | =C-c o g=            | созадать ссылку                 |
| org-store-link              | =C-c o l=            | store link                      |
| org-capture                 | =C-c o c=            | создать заметку                 |
| org-agenda                  | =C-c o a=            | открыть agenda                  |
| org-clock-goto              | =C-c o j=            | перейти к задаче                |
| org-clock-in-last           | =C-c o d=            | повторный запуск времени задачи |
| org-clock-in                | =C-c o i=            | запустить время выполнения      |
| org-clock-out               | =C-c o o=            | остановить время выполнения     |
|-----------------------------+----------------------+---------------------------------|
|-----------------------------+----------------------+---------------------------------|
| Windows                     |                      |                                 |
| hydra-windows/body          | =C-c w=              | hydra windows                   |
| golden-ratio-mode           | =C-c w g=            | включить/отключить golden ratio |
| balance-windows             | =C-c w b= or =C-x += | сбалансировать размер всех окон |
| shrink-window               | =C-c w s=            | уменьшить окно по вертикали     |
| shrink-window-horizontally  | =C-c w [= or =C-x {= | уменьшить окно по горизонтали   |
| enlarge-window-horizontally | =C-c w ]= or =C-x }= | увеличить окно по горизонтали   |
|-----------------------------+----------------------+---------------------------------|
|-----------------------------+----------------------+---------------------------------|
| Text                        |                      |                                 |
| hydra-text-scale/body       | =C-c T=              | hydra text                      |
| text-scale-increase         | =C-c T j=            | увеличить текст                 |
| text-scale-decrease         | =C-c T k=            | уменьшить текст                 |
|-----------------------------+----------------------+---------------------------------|
|-----------------------------+----------------------+---------------------------------|
| File GTD                    |                      |                                 |
| hydra-file-gtd/body         | =C-c g=              | hydra File GTD                  |
| et/open-inbox               | =C-c g i=            | открыть фийл Inbox              |
| et/open-agenda              | =C-c g a=            | открыть фийл Agenda             |
| et/open-journal             | =C-c g j=            | открыть фийл Journal            |
| et/open-notes               | =C-c g n=            | открыть фийл Note               |
| et/open-projects            | =C-c g p=            | открыть фийл Projects           |
| et/open-someday             | =C-c g s=            | открыть фийл Someday            |
| et/open-next-tasks          | =C-c g t=            | открыть фийл Next task          |
| et/open-waiting             | =C-c g w=            | открыть фийл Waiting            |
|-----------------------------+----------------------+---------------------------------|




*** Settings Hydra

#+begin_src emacs-lisp

  (use-package hydra
    :bind (("C-c b" . hydra-browser/body)
	   ("C-c t" . hydra-treemacs/body)
	   ("C-c s" . hydra-theme/body)
	   ("C-c o" . hydra-org/body)
	   ("C-c w" . hydra-windows/body)
	   ("C-c T" . hydra-text-scale/body)
	   ("C-c g" . hydra-file-gtd/body)
	   ))

  (use-package major-mode-hydra
    :after hydra
    :preface
    (defun with-alltheicon (icon str &optional height v-adjust face)
      "Display an icon from all-the-icon."
      (s-concat (all-the-icons-alltheicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-faicon (icon str &optional height v-adjust face)
      "Display an icon from Font Awesome icon."
      (s-concat (all-the-icons-faicon icon ':v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-fileicon (icon str &optional height v-adjust face)
      "Display an icon from the Atom File Icons package."
      (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-octicon (icon str &optional height v-adjust face)
      "Display an icon from the GitHub Octicons."
      (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str)))

#+end_src

*** Hydra / Browser

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-browser
    (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "chrome" "Browser" 1 -0.05))
    (""
     (("d" engine/search-duckduckgo "Duckduckgo")
      ("i" engine/search-google-images "Google images")
      ("y" engine/search-youtubes "Youtube")
      ("g" engine/search-github "GitHub"))))

#+end_src

*** Hydra / Treemacs

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-treemacs
    (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "file-text" "Treemacs" 1 -0.05))
    (""
     (("t" treemacs "Treemacs")
      ("s" lsp-treemacs-symbols "Treemacs Symbols"))))

#+end_src

*** Hydra / Theme

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-theme
    (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "codepen" "Theme" 1 -0.05))
    ("All Theme"
     (("a" counsel-load-theme "View all themes"))
     "Used themes"
     (("d" set-night-theme "Night theme")
      ("l" set-light-theme "Light theme"))
     "Frame"
     (("p" (et/transparent-frame t) "Transparent frame")
      ("n" (et/transparent-frame nil) "Not transparent frame"))))

#+end_src

*** Hydra / Org

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-org
    (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "codepen" "Org" 1 -0.05))
    (""
     (("g" org-insert-link-global "Insert link")
      ("l" org-store-link "Store link")
      ("c" org-capture "Create capture")
      ("a" org-agenda "Open agenda"))
     "Clock"
     (("j" org-clock-goto "Org clock goto")
      ("d" org-clock-in-last "Org clock in last")
      ("i" org-clock-in "Org clock in")
      ("o" org-clock-out "Org clock uot")
      ("t" org-clock-report "Org clock report"))))

#+end_src

*** Hydra / Windows

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-windows
    (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "windows" "Windows" 1 -0.05))
    (""
     (("g" golden-ratio-mode "Golden ratio")
      ("b" balance-windows   "Balance windows"))
     ""
     (("s" shrink-window               "Shrink window")
      ("[" shrink-window-horizontally  "Shrink window horizontally")
      ("]" enlarge-window-horizontally "Enlarge window horizontally"))))

#+end_src

*** Hydra / Text

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-text-scale
    (:hint nil :forein-keys warn :quit-key "q" :timeout 4 :title (with-faicon "codepen" "Text" 1 -0.05))
    (""
     (("j" text-scale-increase "in")
      ("k" text-scale-decrease "out"))))

#+end_src

*** Hydra / File GTD

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-file-gtd
    (:hint nil :forein-keys warn :quit-key "q" :timeout 4 :title (with-faicon "codepen" "GTD" 1 -0.05))
    ("File GTD"
     (("i" (et/open-inbox) "Open Inbox")
      ("a" (et/open-agenda) "Open Agenda")
      ("j" (et/open-journal) "Open Journal")
      ("n" (et/open-notes) "Open Note"))
     ""
      (("p" (et/open-projects) "Open Project")
      ("s" (et/open-someday) "Open Someday")
      ("t" (et/open-next-tasks) "Open Next task")
      ("w" (et/open-waiting) "Open Waiting"))))

#+end_src
* Development

** Languages

*** IDE Features with lsp-mode

**** lsp-mode

GitHub: [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]]

Я ипользую =lsp-mode=, чтобы сделать IDE-подобную функциональность. Прежде чем настроить =lsp-mode=, ознакомьтесь c [[https://emacs-lsp.github.io/lsp-mode/page/languages/][документацией для своего языка]].

#+begin_src emacs-lisp

  (defun et/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . et/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))

#+end_src

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] - это набор улучшений пользовательского интерфейса, созданных на основе, =lsp-mode= которые делают GNU Emacs еще более похожим на IDE.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

**** lsp-treemacs

GitHub: [[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]]

Treemacs - файловый менеджер древовидной структуры для GNU Emacs.

treemacs-icons-dired - позволяет использовать значки treemacs в dired буферах.

***** Commands

| command                 | key / ex command | description                                                        |
|-------------------------+------------------+--------------------------------------------------------------------|
| lsp-treemacs-symbols    | =C-x t s=        | Показать дерево символов в текущем файле                           |
| lsp-treemacs-references | -                | Показать древовидную структуру для ссылок символа под курсором     |
| lsp-treemacs-error-list | -                | Показать древовидную структуру диагностических сообщений в проекте |
|-------------------------+------------------+--------------------------------------------------------------------|

***** Settings

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

  (global-set-key (kbd "C-x t t") 'treemacs)
  (global-set-key (kbd "C-x t s") 'lsp-treemacs-symbols)

  (use-package treemacs-icons-dired
    :config (treemacs-icons-dired-mode))

#+end_src

**** lsp-ivy

GitHub: [[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]]

Упрощает поиск в коде.

***** Commands

| command                         | key / ex command | description                                                   |
|---------------------------------+------------------+---------------------------------------------------------------|
| lsp-ivy-workspace-symbol        | -                | Поиск имени символа в рабочей области текущего проекта        |
| lsp-ivy-global-workspace-symbol | -                | Поиск имени символа во всех активных рабочих областях проекта |
|---------------------------------+------------------+---------------------------------------------------------------|

***** Settings

#+begin_src emacs-lisp

  (use-package lsp-ivy)

#+end_src

*** Debugging with dap-mode

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] - это пакет для отладки в GNU Emacs.

Документацию по настройки языков можно посмотреть [[https://emacs-lsp.github.io/dap-mode/page/configuration/][тут]].

**** Commands

| command                | key / ex command | description                       |
|------------------------+------------------+-----------------------------------|
| dap-breakpoint-toggle  | -                | поставить точку остановы          |
| dap-breakpoint-delete  | -                | удалить точку остановы            |
| dap-ui-breakpoint-list | -                | спосок всех точек остановы        |
| dap-debug              | -                | запустить отладку                 |
| dap-hydra              | -                | посмотреть как управлять отладкой |
|------------------------+------------------+-----------------------------------|

**** Settings

#+begin_src emacs-lisp

  (use-package dap-mode)

#+end_src

*** TypeScript and JavaScript

#+begin_src emacs-lisp

  ;(use-package typescript-mode
  ;  :mode "\\.ts\\'"
  ;  :hook (typescript-mode . lsp-deferred)
  ;  :config
  ;  (setq typescript-indent-level 2)
  ;  (require 'dap-node)
  ;  (dap-node-setup))

  (use-package js2-mode
    :mode "\\.jsx?\\'"
    :hook (js2-mode . lsp-deferred)
    :config
    (setq js-indent-level 2))

#+end_src

*Важная заметка!* Для =lsp-mode= работы с TypeScript (и JavaScript) вам необходимо установить языковой сервер на вашем компьютере. Если у вас установлен Node.js, самый простой способ сделать это - выполнить следующую команду:

#+begin_src shell :tangle no

  npm i -g typescript-language-server; npm i -g typescript

#+end_src

*** Python

Для Python использую =lsp-mode= и =dap-mode=.

В данной конфигурации используется [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][pyls]], по этому убедитесь что у вас установлен языковой сервер

#+begin_src sh :tangle no

  pip install --user "python-language-server[all]"
  pip install python-lsp-server

#+end_src

Также вам может понадобиться debugger и среда тестированияя pytest

#+begin_src sh :tangle no

  pip3 install --user debugpy
  pip3 install --user pytest

#+end_src

*Важная заметка!* если при использование OS Windows возникли проблемы, с нормальной работы Python при открытии файлов, попробутей сначало запустить среду Python внутри GNU Emacs при помощи =run-python=.

#+begin_src emacs-lisp

  (use-package python-mode
    :mode "\\.py\\'"
    :hook (python-mode . lsp-deferred)
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    ;; (python-shell-interpreter "python3")
    ;; (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))

#+end_src

Для =virtualenv= можно использовать =pyvenv=. Чтобы запустить используйте =pyvenv-activate=.

GitHub: [[https://github.com/pythonic-emacs/pyenv-mode][pyvenv]]
GitHub: [[https://github.com/pythonic-emacs/pyenv-mode][pyenv-mode]]

#+begin_src emacs-lisp

  (use-package pyvenv
    :config
    (pyvenv-mode 1))

  (use-package pyenv-mode
    ;; Integrate pyenv with Python-mode
    :hook (python-mode . pyenv-mode)
    :init
    (let ((pyenv-path (expand-file-name "~/.pyenv/bin")))
      (setenv "PATH" (concat pyenv-path ":" (getenv "PATH")))
      (add-to-list 'exec-path pyenv-path))
    :config
    (pyenv-mode))

#+end_src

*** CSharp

GitHub: [[https://github.com/emacs-csharp/csharp-mode][csharp-mode]], [[https://github.com/omajid/csproj-mode][csproj-mode]], [[https://github.com/julienXX/dotnet.el][dotnet]]

=csproj-mode= - Основной режим GNU Emacs для редактирования csproj ( .csproj, .vbproj) и других файлов проекта.
=dotnet= - режим [[https://learn.microsoft.com/en-us/dotnet/core/tools/][dotnet CLI]] для GNU Emacs

Перед использованиям убедитесь что у вас установлен языковой сервер [[https://emacs-lsp.github.io/lsp-mode/page/lsp-csharp-omnisharp/][omnisharp]]. Простой способ это сделать, открыть файл с расширением =.cs= и GNU Emacs сам предложит это сделать или =M-x: lsp-install-server= и выбрать нужный сервер.

#+begin_src emacs-lisp

  (use-package csproj-mode)
  (use-package dotnet)

  (use-package csharp-mode
    :mode "\\.cs\\'"
    :hook ((csharp-mode . lsp-deferred)
	   (csharp-mode . dotnet-mode))
    :config
    (require 'dap-netcore))

#+end_src

Не смотря на то что пакет =dotnet= удобный и позволяет избегать написание одних и тех же команд в терминале, по какой то причине он не развивается и в нем есть недочеты.

Один из них, это не удобная работа с несколькими проектами. При первом запуске =dotnet-run= записывается путь к проекту и при изменения проекта путь остается прежним. Я добавил свою функцию чтобы обнулять =dotnet-run-last-proj-dir=, а после запускать команду =dotnet-run=.

#+begin_src emacs-lisp

  (defun et/dotnet-run ()
    (interactive)
    (setq dotnet-run-last-proj-dir nil)
    (dotnet-run dotnet-run-last-proj-dir))

#+end_src

*** Company Mode

GitHub: [[https://github.com/company-mode/company-mode][company]]

Company - это фреймворк для автозавершения текста для GNU Emacs.

GitHub: [[https://github.com/sebastiencs/company-box][company-box]]

Фирменный интерфейс с иконками.

#+begin_src emacs-lisp

  (use-package company
    ;:after lsp-mode
    ;:hook (lsp-mode . company-mode)
    :hook (after-init . global-company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

*** Web mode

GitHub: [[https://github.com/fxbois/web-mode][web-mode]]

web-mode - это режим emacs для редактирования веб-шаблонов.

#+begin_src emacs-lisp

  (use-package web-mode
    :mode (("\\.css$"  . web-mode)
           ("\\.html$" . web-mode)))

#+end_src

*** JSON

=json-mode= - режим GNU Emacs для обработки файлов JSON

GitHub: [[https://github.com/joshwnj/json-mode][json-mode]]

#+begin_src emacs-lisp

  (use-package json-mode
    :mode "\\.json\\'")

#+end_src

*** YAML

=yaml-mode= - режим GNU Emacs для обработки файлов YAML/YML

GitHub: [[https://github.com/yoshiki/yaml-mode][yaml-mode]]

#+begin_src emacs-lisp

  (use-package yaml-mode
    :mode (("\\.yml$"  . yaml-mode)
           ("\\.yaml$" . yaml-mode)))

#+end_src

*** Makefile

=makefile-gmake-mode= - режим GNU Emacs для обработки файлов Makefile

#+begin_src emacs-lisp

  (use-package makefile-gmake-mode
    :ensure nil
    :mode  ("Makefile.*" . makefile-gmake-mode))

#+end_src

** Buildsystem

*** Docker

=Docker=, режим для управления докером из GNU Emacs.

GitHub: [[https://github.com/Silex/docker.el][docker]]

#+begin_src emacs-lisp

  (use-package docker
    :bind ("C-c d" . docker))

#+end_src

=Dockerfile Mode= — режим GNU Emacs для обработки файлов Dockerfile.

GitHub: [[https://github.com/spotify/dockerfile-mode][dockerfile-mode]]

#+begin_src emacs-lisp

  (use-package dockerfile-mode)

#+end_src

** Projectile

GitHub: [[https://github.com/bbatsov/projectile/tree/db5748ea4a6428136769e7e50c6d0a12aa7acd8f][projectile]]

Projectile - это библиотека взаимодействия с проектом для GNU Emacs.

*** Commands

| command                              | key / ex command | description                                                     |
|--------------------------------------+------------------+-----------------------------------------------------------------|
| projectile-command-map               | =C-x p=          |                                                                 |
| projectile-find-file                 | =C-x p f=        | Показать список всех файлов в проекте.                          |
|                                      |                  | С аргументом префикса он сначала очистит кеш.                   |
| projectile-find-file-other-window    | =C-x p 4 f=      | Перейти к файлу проекта с помощью                               |
|                                      |                  | завершения и показать его в другом окне.                        |
| projectile-find-dir                  | =C-x p d=        | Показать список всех каталогов в проекте.                       |
|                                      |                  | С аргументом префикса он сначала очистит кеш.                   |
| projectile-find-dir-other-window     | =C-x p 4 d=      | Перейдите в каталог проекта и покажите его в другом окне.       |
| projectile-switch-to-buffer          | =C-x p b=        | Показать список всех буферов проекта, открытых в данный момент. |
| projectile-dired                     | =C-x p D=        | Открывает корень проекта в формате dired                        |
| projectile-kill-buffers              | =C-x p k=        | Убивает все буферы проекта.                                     |
| projectile-recentf                   | =C-x p e=        | Показывает список недавно посещенных файлов проекта.            |
| projectile-next-project-buffer       | =C-x p left=     | Переключиться на предыдущий буфер проекта.                      |
| projectile-previous-project-buffer   | =C-x p right=    | Переключиться на следующий буфер проекта.                       |
| projectile-run-shell-command-in-root | =C-x p !=        | Запускается shell-command в корневом каталоге проекта.          |
| projectile-run-shell                 | =C-x p x s=      | Запускается shell.                                              |
| projectile-save-project-buffer       | =C-x p S=        | Сохраните все буферы проекта.                                   |
| projectile-switch-project            | =C-x p p=        | Отображение списка известных проектов                           |
|--------------------------------------+------------------+-----------------------------------------------------------------|

Полный список команд можно посмотреть по [[https://docs.projectile.mx/projectile/usage.html][ссылке]].

*** Settings

#+begin_src emacs-lisp

  (use-package projectile
    :config
      (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
      (projectile-mode +1))

#+end_src

** Magit

GitHub: [[https://github.com/magit/magit][magit]]

Magit - это интерфейс системы контроля версий Git.

*** Commands

| command              | key / ex command | description                                                                      |
|----------------------+------------------+----------------------------------------------------------------------------------|
| magit-status         | =C-x g=          | состояние репозитория (git status)                                               |
| magit-stage-file     | =s=              | добавить изменения в точке в промежуточную область (git add <file>)              |
| magit-stage-modified | =S=              | внести все изменения в файлах, измененные в рабочем дереве (git add .)           |
| magit-unstage-file   | =u=              | удалить изменения в точке из промежуточной области (git restore --staged <file>) |
| magit-unstage-all    | =U=              | удалить все изменения из промежуточной области (git restore --staged .)          |
| magit-commit         | =c=              | коммит (git commit)                                                              |
|                      | =?=              | открыть все команды magit                                                        |
|----------------------+------------------+----------------------------------------------------------------------------------|

*** Settings

#+begin_src emacs-lisp

  (use-package magit
    :bind (("C-x g" . #'magit-status)))

#+end_src

** Rainbow Delimiters

GitHub: [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]

Полезно в режимах программирования, потому что раскрашивают вложенные круглые скобки в соответствии с их глубиной вложенности.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Terminals

** Eshell

=Eshell= — это собственная реализация оболочки GNU Emacs, написанная на GNU Emacs Lisp.

=eshell-git-prompt= - пакет предоставляет темы приглашения GNU Emacs Shell (Eshell).

GitHub: [[https://github.com/xuchunyang/eshell-git-prompt][eshell-git-prompt]]

#+begin_src emacs-lisp

  (defun et/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt)

  (use-package eshell
    :hook (eshell-first-time-mode . et/configure-eshell)
    :config
    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'multiline2))

#+end_src
