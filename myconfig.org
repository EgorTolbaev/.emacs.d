#+AUTHOR: Egor Tolbaev
#+TITLE: GNU Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Table of Contents                                                     :TOC_3:
- [[#about][About]]
- [[#startup-performance][Startup Performance]]
- [[#переменные-ос][Переменные ОС]]
- [[#package-system-setup][Package System Setup]]
- [[#keep-emacsd-clean][Keep .emacs.d Clean]]
- [[#general-settings][General settings]]
  - [[#defaults][Defaults]]
  - [[#fonts][Fonts]]
  - [[#кодировка][Кодировка]]
  - [[#парные-элементы][Парные элементы]]
  - [[#перенос-по-словам][Перенос по словам]]
  - [[#чистим-пробелы][Чистим пробелы]]
  - [[#отключить-сохранений][Отключить сохранений]]
  - [[#auto-mode-alist][Auto mode alist]]
- [[#ui][UI]]
  - [[#theme][Theme]]
  - [[#переключение-темы][Переключение темы]]
    - [[#светлая-тема][Светлая тема]]
    - [[#темная-тема][Темная тема]]
  - [[#modeline][Modeline]]
  - [[#icons][Icons]]
  - [[#отображение-времени][Отображение времени]]
  - [[#настройка-фрейма][Настройка фрейма]]
  - [[#golden-ratio][Golden ratio]]
  - [[#highlight-indent-guides][Highlight indent guides]]
    - [[#commands][Commands]]
    - [[#settings][Settings]]
- [[#office][Office]]
  - [[#org-mode][Org mode]]
    - [[#commands-1][Commands]]
    - [[#basic-config][Basic Config]]
    - [[#capture][Capture]]
    - [[#org-bullets][Org bullets]]
    - [[#center-org-buffers][Center Org Buffers]]
    - [[#toc-org][Toc org]]
    - [[#block-templates][Block Templates]]
    - [[#auto-tangle-configuration-files][Auto-tangle Configuration Files]]
  - [[#markdown][Markdown]]
- [[#file-management][File Management]]
  - [[#dired][Dired]]
    - [[#commands-2][Commands]]
    - [[#settings-1][Settings]]
- [[#modes][Modes]]
  - [[#ivy][IVY]]
    - [[#commands-3][Commands]]
    - [[#settings-2][Settings]]
  - [[#ivy-rich][IVY-RICH]]
  - [[#counsel][COUNSEL]]
  - [[#helpful][Helpful]]
  - [[#which-key][Which Key]]
- [[#general-packages][General packages]]
  - [[#bs][BS]]
  - [[#dashboard][Dashboard]]
  - [[#reverse-im][Reverse-im]]
  - [[#browser][Browser]]
    - [[#engine-mode][Engine-mode]]
  - [[#hydra][Hydra]]
    - [[#commands-4][Commands]]
    - [[#settings-hydra][Settings Hydra]]
    - [[#hydra--browser][Hydra / Browser]]
    - [[#hydra--treemacs][Hydra / Treemacs]]
    - [[#hydra--theme][Hydra / Theme]]
    - [[#hydra--org][Hydra / Org]]
    - [[#hydra--windows][Hydra / Windows]]
    - [[#hydra--text][Hydra / Text]]
- [[#development][Development]]
  - [[#languages][Languages]]
    - [[#ide-features-with-lsp-mode][IDE Features with lsp-mode]]
    - [[#debugging-with-dap-mode][Debugging with dap-mode]]
    - [[#typescript-and-javascript][TypeScript and JavaScript]]
    - [[#python][Python]]
    - [[#csharp][CSharp]]
    - [[#company-mode][Company Mode]]
    - [[#web-mode][Web mode]]
    - [[#json][JSON]]
    - [[#yaml][YAML]]
    - [[#makefile][Makefile]]
  - [[#projectile][Projectile]]
  - [[#magit][Magit]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
- [[#terminals][Terminals]]
  - [[#eshell][Eshell]]

* About

#+begin_src emacs-lisp

  ;;; init.el --- Initialisation file for Emacs

  ;; Copyright © 2020-2022 Egor Tolbaev <egor05.09.97@gmail.com>

  ;; Author: Egor Tolbaev <egor05.09.97@gmail.com>
  ;; URL: https://github.com/EgorTolbaev/.emacs.d
  ;; Keywords: emacs, init, init.el, dotfiles

  ;; This file is NOT part of GNU Emacs.

  ;;; Commentary:
  ;;
  ;; I decided to create my own GNU Emacs configuration
  ;; to simplify my daily life by adding scripts and useful features.
  ;; This file is generated based on myconfig.org

  ;;; Code:

#+end_src

Я решил создать свою собственную конфигурацию GNU Emacs, что бы упростить мою повседневную жизнь, добавив сценарии и полезные функции.

Для управления конфигурациями пакетов я использую пакет use-package от John Wiegley.

Этот файл генерирует [[https://github.com/EgorTolbaev/.emacs.d/blob/master/init.el][init.el]] который будет загружен Emacs при запуске.

* Startup Performance

Ускорьте запуск, уменьшив частоту сборки мусора.

#+begin_src emacs-lisp

  (setq gc-cons-threshold (* 50 1000 1000))

#+end_src

* Переменные ОС

Некоторые части конфигурации отличаются в зависимости от системы, поэтому я определил переменные для дальнейшего использовани.

#+begin_src emacs-lisp

  (defun system-is-linux()
    (string-equal system-type "gnu/linux"))
  (defun system-is-windows()
    (string-equal system-type "windows-nt"))

#+end_src

* Package System Setup

[[https://github.com/jwiegley/use-package][use-package]] - упрощает установку пакетов.

#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
      (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Keep .emacs.d Clean

Переносим переменные, созданные Custom в отдельный файл.

#+begin_src emacs-lisp

  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))

#+end_src

* General settings

** Defaults

Для лучшего взаимодействия с GNU Emacs я использую следующие значения по умолчанию.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  ;; (setq ring-bell-function 'ignore)              ; Отключить звуковой сигнал
  (blink-cursor-mode -1)                            ; Курсор не мигает
  (fset 'yes-or-no-p 'y-or-n-p)                     ; Замена yes-or-on на y-or-n

  (menu-bar-mode -1)    ; Не показывать меню
  (scroll-bar-mode -1)  ; Не показывать полосу прокрутки
  (tool-bar-mode -1)    ; Не показывать панель инструментов

  (setq visible-bell t) ; Установите видимый звонок

  (setq user-full-name "Egor Tolbaev")              ; Имя пользователя
  (setq user-mail-address "egor05.09.97@gmail.com") ; Email пользователя

  ;; Показ номера строки стандартными средствами
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Отключить номера строк где они не нужны
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  org-agenda-mode-hook
                  treemacs-mode-hook
                  eww-mode-hook
                  calendar-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Fonts

Использую [[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]] или Consolas еще не решил:)

#+begin_src emacs-lisp

  (defvar et/default-font-size 110)
  ;;(set-face-attribute 'default nil :font "Consolas")
  (set-face-attribute 'default nil :font "Source Code Pro Medium" :height et/default-font-size)
  ;(set-fontset-font t 'latin "Noto Sans")
  (set-fontset-font t 'latin "Cantarell")

#+end_src

** Кодировка

#+begin_src emacs-lisp

  (set-language-environment 'UTF-8)
  (setq default-buffer-file-coding-system 'utf-8)
  (setq-default coding-system-for-read    'utf-8)
  (setq file-name-coding-system           'utf-8)
  (set-keyboard-coding-system        'utf-8-unix)
  (set-terminal-coding-system             'utf-8)
  (prefer-coding-system                   'utf-8)

#+end_src

** Парные элементы

Теперь при вводе парного элемента типа "(" они автоматически закрываються

#+begin_src emacs-lisp

  (electric-pair-mode t)
  (show-paren-mode 1)

#+end_src

** Перенос по словам

Слова которые не помещаются по размеру фрейма переносится на другую сторку

#+begin_src emacs-lisp

  (setq word-wrap t)
  (global-visual-line-mode t)

#+end_src

** Чистим пробелы

При сохранение файла удаляются лишние пробелы в конце строки и файла.

#+begin_src emacs-lisp

  (add-hook 'before-save-hook '(lambda () (delete-trailing-whitespace)))

#+end_src

** Отключить сохранений

#+begin_src emacs-lisp

  (setq make-backup-files nil)        ; Не нужны файлы резервных копий
  (setq auto-save-list-file-name nil) ; Не нужны файлы .saves
  (setq auto-save-default nil)        ; Не хочу автосохранения

#+end_src

** Auto mode alist

#+begin_src emacs-lisp

  (setq auto-mode-alist
      (append
       '(
         ("\\.el$"  . lisp-mode)
         ("\\.org$" . org-mode))))

#+end_src

* UI

** Theme

Я использую темы [[https://github.com/hlissner/emacs-doom-themes][doom-themes]] в сочетании с [[https://github.com/EgorTolbaev/.emacs.d/blob/master/myconfig.org#modeline][doom-modeline]]. Для отображения значков в doom-modeline использую [[https://github.com/EgorTolbaev/.emacs.d/blob/master/myconfig.org#icons][all-the-icons]]

#+begin_src emacs-lisp

  (use-package doom-themes
    :config
      (load-theme 'doom-Iosvkem))

#+end_src

** Переключение темы

*** Светлая тема

#+begin_src emacs-lisp

  (defun set-light-theme()
    (interactive)
    (load-theme 'doom-opera-light))
    (global-set-key (kbd "<f8>") 'set-light-theme)

#+end_src

*** Темная тема

#+begin_src emacs-lisp

  (defun set-night-theme()
    (interactive)
    (load-theme 'doom-Iosvkem))
    (global-set-key (kbd "<f9>") 'set-night-theme)

#+end_src

** Modeline

GitHub: [[https://github.com/seagle0128/doom-modeline][doom-modeline]]

#+begin_src emacs-lisp

  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode))

#+end_src

** Icons

GitHub: [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]

Для того, чтобы значки работали, очень важно, чтобы вы установили шрифты ресурсов, включенные в этот пакет.

M-x all-the-icons-install-fonts

Для Windows эта функция предложит указать каталог для загрузки, чтобы вы могли установить их вручную.

#+begin_src emacs-lisp

  (use-package all-the-icons)

#+end_src

** Отображение времени

#+begin_src emacs-lisp

  (setq display-time-24hr-format t) ; 24-часовой временной формат в mode-line
  (display-time-mode t)             ; показывать часы в mode-line
  (size-indication-mode t)          ; размер файла в %-ах

#+end_src

** Настройка фрейма

Устанавливаю прозрачность фрейма и разворачиваю окно по умолчанию.

/Что бы это было красиво следите за свои рабочим столом и окнами по зади фрейма Emacs/

#+begin_src emacs-lisp

  (defun transparent-frame (bool)
    (if bool
        (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
      (set-frame-parameter (selected-frame) 'alpha '(100 . 100))))

  (transparent-frame t)

  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

** Golden ratio

GitHub: [[https://github.com/roman/golden-ratio.el][golden-ratio]]

Удобный способ работать с окнами, при перключении =golden-ratio= изменяет размер окна с которым работаете.

#+begin_src emacs-lisp

  (use-package golden-ratio
    :config
    (golden-ratio-mode 1))

#+end_src
** Highlight indent guides

GitHub: [[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]]

=highlight-indent-guides= - пакет для выделения уровней отступов в коде. С этом режимом так же включаю [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Hideshow.html][hs-minor-mode]] что позволяет скрывать/показывать блок кода.

*** Commands

| command       | key / ex command | description                      |
|---------------+------------------+----------------------------------|
| hs-hide-block | =C-c @ C-d=      | скрыть текущий блок              |
| hs-show-block | =C-c @ C-s=      | показать текущий блок            |
| hs-hide-all   | =C-c @ C-t=      | скрыть все блоки верхнего уровня |
| hs-show-all   | =C-c @ C-a=      | показать все блоки в буфере      |
|---------------+------------------+----------------------------------|

*** Settings

#+begin_src emacs-lisp

  (use-package highlight-indent-guides
    :ensure t
    :hook ((prog-mode . highlight-indent-guides-mode)
           (prog-mode . hs-minor-mode))
    :config
    (setq highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-responsive 'top))

#+end_src

* Office

** Org mode

[[https://orgmode.org/][Org mode]] предназначен для ведения заметок, списков дел, планирования проектов и многого другого.

Описание: [[https://orgmode.org/manual/Handling-Links.html][org-store-link]], [[https://orgmode.org/manual/Capture.html][org-capture]], [[https://orgmode.org/manual/Agenda-Commands.html][org-agenda]]

*** Commands

| command                                 | key / ex command | description            |
|-----------------------------------------+------------------+------------------------|
| org-capture                             | =C-c c=          | создать заметку        |
| org-agenda                              | =C-c a=          | открыть agenda         |
| org-store-link                          | =C-c l=          | cоздать ссылку         |
| org-todo                                | =C-c C-t=        | изменить статус задачи |
| org-set-tags-command                    | =C-c C-q=        | поставить тег          |
| org-schedule                            | =C-c C-s=        | указать дату по плану  |
| org-deadline                            | =C-c C-d=        | указать дату дедлайна  |
| org-table-create-or-convert-from-region | =C-x pipe=       | создать таблицу        |
| calendar                                | -                | открыть календарь      |
|-----------------------------------------+------------------+------------------------|

*** Basic Config

Этот раздел содержит базовую конфигурацию =org-mode=, а также конфигурацию для повестоки дня.

#+begin_src emacs-lisp

  (defun et/org-mode-setup ()
  (org-indent-mode)
  ;;(variable-pitch-mode 1)
  (visual-line-mode 1))

  (use-package org
    :hook (org-mode . et/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)  ; Заметки с отметкой времени
    (setq org-log-into-drawer t)

    (when (system-is-windows)
      (setq org-agenda-files '("c:/Users/user/Dropbox/OrgFiles/tasks/job.org"
                               "c:/Users/user/Dropbox/OrgFiles/tasks/house.org"
                               "c:/Users/user/Dropbox/OrgFiles/tasks/study.org"
                               "c:/Users/user/Dropbox/OrgFiles/tasks/meet.org"
                               "c:/Users/user/Dropbox/OrgFiles/holidays/Birthdays.org")))
    (when (system-is-linux)
      (setq org-agenda-files '("~/Dropbox/OrgFiles/tasks/job.org"
                               "~/Dropbox/OrgFiles/tasks/house.org"
                               "~/Dropbox/OrgFiles/tasks/study.org"
                               "~/Dropbox/OrgFiles/holidays/Birthdays.org")))

    (setq org-todo-keywords '((sequence "TODO(t)"
                                        "IN-PROGRESS(s)"
                                        "PAUSE(p@/!)"
                                        "NEXT(n)"
                                        "ACTIVE(a)"
                                        "WAITING(w@/!)""|" "DONE(d!)" "CANCEL(c@)")))

    (setq org-tag-alist
     '((:startgroup)
        (:endgroup)
        ("@home" . ?H)
        ("@work" . ?W)
        ("agenda" . ?a)
        ("meeting" .?m)
        ("note" . ?n)
        ("idea" . ?i)))

    (setq org-agenda-custom-commands
      '(("d" "Meetings today" tags-todo "+SCHEDULED>=\"<today>\"+SCHEDULED<\"<tomorrow>\"+meeting/ACTIVE"))))


  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda)

#+end_src

*** Capture

Я использую  =capture= для быстрого создания задач, заметок и другой организации дел.

#+begin_src emacs-lisp

  (when (system-is-windows)
    (set 'path_note    "c:/Users/user/Dropbox/OrgFiles/notes.org")
    (set 'path_journal "c:/Users/user/Dropbox/OrgFiles/Journal.org")
    (set 'path_meeting "c:/Users/user/Dropbox/OrgFiles/tasks/meet.org")
    (set 'path_task    "c:/Users/user/Dropbox/OrgFiles/tasks/job.org"))
  (when (system-is-linux)
    (set 'path_note    "~/Dropbox/OrgFiles/notes.org")
    (set 'path_journal "~/Dropbox/OrgFiles/Journal.org")
    (set 'path_meeting "~/Dropbox/OrgFiles/tasks/meet.org")
    (set 'path_task    "~/Dropbox/OrgFiles/tasks/job.org"))

  (setq org-capture-templates
        '(("n" "Notes" entry (file+headline path_note "Notes")
           "* TODO %? %^g \nCreated %U\n  %i\n")

          ("m"  "Meeting work")
          ("mn" "New meeting work" entry (file+olp path_meeting "New meetings")
           "* ACTIVE %? :meeting: \nSCHEDULED: %^t  %i" :empty-lines 1)

          ("w"  "Work")
          ("wn" "New task" entry (file+olp path_task "Tasks")
           "* TODO %?\nSCHEDULED:  %^t \nDEADLINE: %^t  %i" :empty-lines 1)

          ("j" "Journal Entries")
          ("jj" "Journal" entry
           (file+olp+datetree path_journal)
           "\n* %<%I:%M %p> - %? :journal:\n\nNote:\n\n"
           :clock-in :clock-resume
           :empty-lines 1)))


#+end_src

*** Org bullets

Github: [[https://github.com/sabof/org-bullets][org-bullets]]

=org-bullets= заменяет звездочки заголовков в буферах режима организации более красивыми символами.

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

Github: [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]]

Мне нравится когда файл в режим =org-mode= центрируется в буфере.

#+begin_src emacs-lisp

  (when (system-is-windows)
    (set 'center_org 100))
  (when (system-is-linux)
    (set 'center_org 150))

  (defun et/org-mode-visual-fill ()
      (setq visual-fill-column-width center_org
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1))

    (use-package visual-fill-column
      :hook (org-mode . et/org-mode-visual-fill))

#+end_src

*** Toc org

GitHub: [[https://github.com/snosov1/toc-org][toc-org]]


Удобный способ делать оглавления автоматически, просто в первом заголовке добавить тег :TOC:

#+begin_src emacs-lisp

  (use-package toc-org
    :after org
    :hook (org-mode . toc-org-enable))

#+end_src

*** Block Templates

Шаблоны позволяют вводить что-то вроде, =<el=, затем при нажатии =Tab= разворачиваеться шаблон.

#+begin_src emacs-lisp

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

*** Auto-tangle Configuration Files

Каждый раз при сохранении =myconfig.org= экспортирует конфигурацию в =init.el=

#+begin_src emacs-lisp

  (when (system-is-windows)
    (defvar et/path-expand "./myconfig.org"))
  (when (system-is-linux)
    (defvar et/path-expand "~/.emacs.d/myconfig.org"))

  (defun et/org-babel-tangle-config ()
      (when (string-equal (buffer-file-name)
                        (expand-file-name et/path-expand))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'et/org-babel-tangle-config)))

#+end_src

** Markdown

[[https://jblevins.org/projects/markdown-mode/][Markdown Mode for Emacs]]

Прежде чем использовать этот пакет, нужно убедиться что установлен какой то процессор Markdown

В моем конфиге это - [[https://github.com/jgm/pandoc][pandoc]]

#+begin_src emacs-lisp

  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "pandoc"))

#+end_src

* File Management

** Dired

Dired - это встроенный файловый менеджер для Emacs.

/В OS Windows может быть не корректная сортировка файлов и дополнительная информация, это неприятно, на работе не мешает./

Для отображения icons в =Dired= использую [[#treemacs-icons][Treemacs Icons]].

*** Commands

| command    | key / ex command | description                  |
|------------+------------------+------------------------------|
| dired      | =C-x d=          | открыть                      |
| dired-jump | =C-x C-j=        | открыть dired текущего файла |
|------------+------------------+------------------------------|

=dired-single=

| command                   | key / ex command | description                      |
|---------------------------+------------------+----------------------------------|
| dired-single-up-directory | =h=              | вернуться назад в текущем буфере |
| dired-single-buffer       | =j=              | открыть в текущем буфере         |
|---------------------------+------------------+----------------------------------|

**** Навигация

| command                      | key / ex command | description                                 |
|------------------------------+------------------+---------------------------------------------|
| dired-next-line              | =n=              | cледующая строка                            |
| dired-previous-line          | =p=              | предыдущая строка                           |
| dired-goto-file              | =j=              | перейти к файлу в буфере                    |
| dired-find-file              | =RET=            | выберите файл или каталог                   |
| dired-up-directiry           | =^=              | перейти в родительский каталог              |
| dired-find-file-other-window | =o=              | открыть файл в «другом» окне                |
| dired-display-file           | =C-o=            | показать файл в другом окне без фокусировки |
| dired-view-file              | =v=              | предварительный просмотр                    |
| revert-buffer                | =g=              | обновить буфер                              |
|------------------------------+------------------+---------------------------------------------|

**** Маркировка файлов

| command                 | key / ex command | description                                             |
|-------------------------+------------------+---------------------------------------------------------|
| dired-mark              | =m=              | отметить файл                                           |
| dired-unmark            | =u=              | снять отметку                                           |
| dired-unmark-all-marks  | =U=              | снять отметку со всех файлов                            |
| dired-toggle-marks      | =* t= or =t=     | Инвертирует отмеченные файлы в буфере                   |
| dired-mark-files-regexp | =% m=            | Пометить файлы в буфере с помощью регулярного выражения |
|                         | =*=              | Множество других функций автоматической маркировки      |
| dired-do-kill-lines     | =k=              | «Убить» отмеченные предметы                             |
|-------------------------+------------------+---------------------------------------------------------|

**** Копирование и переименование файлов

| command                | key / ex command | description                                         |
|------------------------+------------------+-----------------------------------------------------|
| dired-do-copy          | =C=              | скопировать файл                                    |
| dired-do-rename        | =R=              | переименовать файл                                  |
| dired-do-rename-regexp | =% R=            | Переименовать на основе регулярного выражения ^test |
|------------------------+------------------+-----------------------------------------------------|

**** Удаление файлов

| command                   | key / ex command | description                    |
|---------------------------+------------------+--------------------------------|
| dired-do-delete           | =D=              | Удалить отмеченный файл        |
| dired-flag-file-deletion  | =d=              | Отметить файл для удаления     |
| dired-do-flagged-delete   | =x=              | Выполнить удаление для отметок |
| delete-by-moving-to-trash | -                | Переместить в корзину          |
|---------------------------+------------------+--------------------------------|

**** Создание и распаковка архивов

| command                    | key / ex command | description                                       |
|----------------------------+------------------+---------------------------------------------------|
| dired-do-compress          | =Z=              | Сжать или распаковать файл или папку в ( .tar.gz) |
| dired-do-compress          | =c=              | Сжать выделение в конкретный файл                 |
| dired-compress-files-alist | -                | Привязать команды сжатия к расширению файла       |
|----------------------------+------------------+---------------------------------------------------|

**** Другие общие операции

| command          | key / ex command | description                                |
|------------------+------------------+--------------------------------------------|
| dired-do-touch   | =T=              | Коснитесь (изменить отметку времени)       |
| dired-do-chmod   | =M=              | Изменить режим файла                       |
| dired-do-chown   | =O=              | Сменить владельца файла                    |
| dired-do-chgrp   | =G=              | Изменить группу файлов                     |
| dired-do-symlink | =S=              | Создайте символическую ссылку на этот файл |
| dired-do-load    | =L=              | Загрузить файл Emacs Lisp в Emacs          |
|------------------+------------------+--------------------------------------------|


*** Settings

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (define-key dired-mode-map "h"
      'dired-single-up-directory)
    (define-key dired-mode-map "l"
      'dired-single-buffer))

  (use-package dired-single)

  ;; (use-package all-the-icons-dired
  ;;   :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

* Modes
** IVY

[[https://github.com/abo-abo/swiper/tree/7cdde66c95d5205287e88010bc7a3a978c931db0][Ivy]] - это общий механизм завершения для Emacs. Использую в месте с [[https://github.com/EgorTolbaev/.emacs.d/blob/master/myconfig.org#ivy-rich][ivy-rich]] и [[https://github.com/EgorTolbaev/.emacs.d/blob/master/myconfig.org#counsel][counsel]]

*** Commands

| command                | key / ex command | description                     |
|------------------------+------------------+---------------------------------|
| swiper                 | =C-s=            | открыть поиск                   |
| ivy-alt-done           | =TAB= or =C-l=   | выйти из буфера                 |
| ivy-next-line          | =С-j= or =C-n=   | cледующая строка                |
| ivy-previous-line      | =C-k= or =C-p=   | предыдущая строка               |
| ivy-switch-buffer-kill | =C-d=            | выти из буфера reverse-i-search |
| counsel-switch-buffer  | =C-M-j=          | переключение буферов с превью   |
|------------------------+------------------+---------------------------------|

*** Settings

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (global-set-key (kbd "C-M-j") 'counsel-switch-buffer)

#+end_src

** IVY-RICH

#+begin_src emacs-lisp

  (use-package ivy-rich
    :init
      (ivy-rich-mode 1))

#+end_src

** COUNSEL

#+begin_src emacs-lisp

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
          :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

#+end_src

** Helpful

GitHub: [[https://github.com/Wilfred/helpful][helpful]]

Helpful - это альтернатива встроенной справке Emacs, которая предоставляет гораздо больше контекстной информации.

#+begin_src emacs-lisp

  (use-package helpful
    :custom
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
    :bind
      ([remap describe-function] . counsel-describe-function)
      ([remap describe-command] . helpful-command)
      ([remap describe-variable] . counsel-describe-variable)
      ([remap describe-key] . helpful-key))

#+end_src

** Which Key

GitHub: [[https://github.com/justbur/emacs-which-key][which-key]]

which-key- это второстепенный режим для Emacs, который отображает привязки клавиш после введенной вами неполной команды (префикса) во всплывающем окне.

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
      (setq which-key-idle-delay 1))

#+end_src

* General packages
** BS

GitHub: [[https://github.com/emacs-mirror/emacs/blob/master/lisp/bs.el][bs]]

Меню для выбора и отображения буферов

#+begin_src emacs-lisp

  (use-package bs)

  ;; Добавим чтобы в буфере всегда был scratch
  (setq bs-configurations
      '(("files" "^\\*scratch\\*" nil nil bs-visits-non-file bs-sort-buffer-interns-are-last)))

  (global-set-key (kbd "<f2>") 'bs-show)

#+end_src

** Dashboard

GitHub: [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]]

Расширяемый стартовый экран Emacs.

#+begin_src emacs-lisp

  (use-package dashboard
    :init
     (progn
       (setq dashboard-startup-banner "~/.emacs.d/images/ET_Light_Small.png")
       (setq dashboard-items '((recents  . 5)
                               (projects . 5)))
       (setq dashboard-show-shortcuts nil)
       (setq dashboard-center-content t)
       (setq dashboard-set-file-icons t)
       (setq dashboard-set-heading-icons t)
       (setq dashboard-set-init-info t ))
    :config
     (dashboard-setup-startup-hook))

  ;; Кнопки навигации
  (setq dashboard-set-navigator t)

  (setq dashboard-navigator-buttons
      `(
        ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
         "Homepage"
         "Browse homepage"
         (lambda (&rest _) (browse-url "https://github.com/EgorTolbaev"))))))

#+end_src

** Reverse-im

GitHub: [[https://github.com/emacsmirror/reverse-im][reverse-im]]

Переопределяет функциональную-клавишную-карту для предпочтительных методов ввода для перевода входных последовательностей на английский язык.

#+begin_src emacs-lisp

  (use-package reverse-im
    :custom
      (reverse-im-input-methods '("russian-computer"))
    :config
      (reverse-im-mode t))

#+end_src

** Browser

Я решил использовать в связке с Emacs браузер, ориентированный на клавиатуру, с минимальным графическим интерфейсом [[https://github.com/qutebrowser/qutebrowser][Qutebrowser]]

При установки qutebrowser на Windows возможно потребуеться вручную добавить путь в переменную $path = C:\Program Files\qutebrowser

#+begin_src emacs-lisp

  (use-package browse-url
    :ensure nil
    :custom
      (browse-url-browser-function 'browse-url-generic)
      (browse-url-generic-program "qutebrowser"))

#+end_src

*** Engine-mode

Github: [[https://github.com/hrs/engine-mode/tree/e0910f141f2d37c28936c51c3c8bb8a9ca0c01d1][engine-mode]]

Удобный способ совершать поиск не выходя из Emacs

**** Commands

| command                     | key / ex command | description             |
|-----------------------------+------------------+-------------------------|
| engine/keymap-prefix        | =C-x /=          | открыть буфер команд    |
| engine/search-duckduckgo    | =C-x / d=        | поиск в duckduckgo      |
| engine/search-github        | =C-x / g=        | поиск в GitHub          |
| engine/search-google-images | =C-x / i=        | поиск картинок в google |
| engine/search-youtube       | =C-x / y=        | поиск в youtube         |
|-----------------------------+------------------+-------------------------|


**** Settings

#+begin_src emacs-lisp

  (use-package engine-mode
    :defer 3
    :config
      (defengine duckduckgo
        "https://duckduckgo.com/?q=%s"
	:keybinding "d")

      (defengine github
        "https://github.com/search?ref=simplesearch&q=%s"
	:keybinding "g")

      (defengine google-images
        "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
	:keybinding "i")

      (defengine youtube
        "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
	:keybinding "y")

    (engine-mode t))

#+end_src

** Hydra

GitHub: [[https://github.com/abo-abo/hydra][hydra]], [[https://github.com/jerrypnz/major-mode-hydra.el][major-mode-hydra]]

=hydra= позволяет сделать меню с командами и всплывающем окне отображать их. Это удобно когда вам нужно группировать команды или просто не запоменать все хоткеии, а подсматривать в подсказку.

*** Commands

| command                     | key / ex command     | description                     |
|-----------------------------+----------------------+---------------------------------|
| Браузер                     |                      |                                 |
| hydra-browser/body          | =C-c b=              | hydra браузера                  |
| engine/search-duckduckgo    | =C-c b d=            | поиск в duckduckgo              |
| engine/search-google-images | =C-c b i=            | поиск картинок в google         |
| engine/search-youtubes      | =C-c b y=            | поиск в youtube                 |
| engine/search-githu         | =C-c b g=            | поиск в GitHub                  |
|-----------------------------+----------------------+---------------------------------|
|-----------------------------+----------------------+---------------------------------|
| Treemacs                    |                      |                                 |
| hydra-treemacs/body         | =C-c t=              | hydra treemac                   |
| treemacs                    | =C-c t t=            | treemac                         |
| lsp-treemacs-symbols        | =C-c t s=            | treemacs ymbols                 |
|-----------------------------+----------------------+---------------------------------|
|-----------------------------+----------------------+---------------------------------|
| Настройка темы              |                      |                                 |
| hydra-theme/body            | =C-c s=              | hydra theme                     |
| counsel-load-theme          | =C-c s a=            | посмотреть все темы             |
| set-night-theme             | =C-c s d=            | установить темную тему          |
| set-light-theme             | =C-c s l=            | установить светлую тему         |
| (transparent-frame t        | =C-c s p=            | прозрачный фрейм                |
| (transparent-frame nil)     | =C-c s n=            | не прозрачный фрейм             |
|-----------------------------+----------------------+---------------------------------|
|-----------------------------+----------------------+---------------------------------|
| Org                         |                      |                                 |
| hydra-org/body              | =C-c o=              | hydra org                       |
| org-insert-link-global      | =C-c o g=            | созадать ссылку                 |
| org-store-link              | =C-c o s=            | store link                      |
| org-capture                 | =C-c o c=            | создать заметку                 |
| org-agenda                  | =C-c o a=            | открыть agenda                  |
| org-clock-goto              | =C-c o j=            | перейти к задаче                |
| org-clock-in-last           | =C-c o l=            | повторный запуск времени задачи |
| org-clock-in                | =C-c o i=            | запустить время выполнения      |
| org-clock-out               | =C-c o o=            | остановить время выполнения     |
|-----------------------------+----------------------+---------------------------------|
|-----------------------------+----------------------+---------------------------------|
| Windows                     |                      |                                 |
| hydra-windows/body          | =C-c w=              | hydra windows                   |
| golden-ratio-mode           | =C-c w g=            | включить/отключить golden ratio |
| balance-windows             | =C-c w b= or =C-x += | сбалансировать размер всех окон |
| shrink-window               | =C-c w s=            | уменьшить окно по вертикали     |
| shrink-window-horizontally  | =C-c w [= or =C-x {= | уменьшить окно по горизонтали   |
| enlarge-window-horizontally | =C-c w ]= or =C-x }= | увеличить окно по горизонтали   |
|-----------------------------+----------------------+---------------------------------|
|-----------------------------+----------------------+---------------------------------|
| Text                        |                      |                                 |
| hydra-text-scale/body       | =C-c T=              | hydra text                      |
| text-scale-increase         | =C-c T j=            | увеличить текст                 |
| text-scale-decrease         | =C-c T k=            | уменьшить текст                 |
|-----------------------------+----------------------+---------------------------------|

*** Settings Hydra

#+begin_src emacs-lisp

  (use-package hydra
    :bind (("C-c b" . hydra-browser/body)
           ("C-c t" . hydra-treemacs/body)
           ("C-c s" . hydra-theme/body)
           ("C-c o" . hydra-org/body)
           ("C-c w" . hydra-windows/body)
           ("C-c T" . hydra-text-scale/body)
           ))

  (use-package major-mode-hydra
    :after hydra
    :preface
    (defun with-alltheicon (icon str &optional height v-adjust face)
      "Display an icon from all-the-icon."
      (s-concat (all-the-icons-alltheicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-faicon (icon str &optional height v-adjust face)
      "Display an icon from Font Awesome icon."
      (s-concat (all-the-icons-faicon icon ':v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-fileicon (icon str &optional height v-adjust face)
      "Display an icon from the Atom File Icons package."
      (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-octicon (icon str &optional height v-adjust face)
      "Display an icon from the GitHub Octicons."
      (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str)))

#+end_src

*** Hydra / Browser

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-browser
    (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "chrome" "Browser" 1 -0.05))
    (""
     (("d" engine/search-duckduckgo "Duckduckgo")
      ("i" engine/search-google-images "Google images")
      ("y" engine/search-youtubes "Youtube")
      ("g" engine/search-github "GitHub"))))

#+end_src

*** Hydra / Treemacs

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-treemacs
    (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "file-text" "Treemacs" 1 -0.05))
    (""
     (("t" treemacs "Treemacs")
      ("s" lsp-treemacs-symbols "Treemacs Symbols"))))

#+end_src

*** Hydra / Theme

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-theme
    (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "codepen" "Theme" 1 -0.05))
    ("All Theme"
     (("a" counsel-load-theme "View all themes"))
     "Used themes"
     (("d" set-night-theme "Night theme")
      ("l" set-light-theme "Light theme"))
     "Frame"
     (("p" (transparent-frame t) "Transparent frame")
      ("n" (transparent-frame nil) "Not transparent frame"))))

#+end_src

*** Hydra / Org

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-org
    (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "codepen" "Org" 1 -0.05))
  (""
   (("g" org-insert-link-global "Insert link")
    ("s" org-store-link "Store link")
    ("c" org-capture "Create capture")
    ("a" org-agenda "Open agenda"))
   "Clock"
   (("j" org-clock-goto "Org clock goto")
    ("l" org-clock-in-last "Org clock in last")
    ("i" org-clock-in "Org clock in")
    ("o" org-clock-out "Org clock uot"))))

#+end_src

*** Hydra / Windows

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-windows
    (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "windows" "Windows" 1 -0.05))
    (""
     (("g" golden-ratio-mode "Golden ratio")
      ("b" balance-windows   "Balance windows"))
     ""
     (("s" shrink-window               "Shrink window")
      ("[" shrink-window-horizontally  "Shrink window horizontally")
      ("]" enlarge-window-horizontally "Enlarge window horizontally"))))

#+end_src

*** Hydra / Text

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-text-scale
    (:hint nil :forein-keys warn :quit-key "q" :timeout 4 :title (with-faicon "codepen" "Text" 1 -0.05))
    (""
     (("j" text-scale-increase "in")
      ("k" text-scale-decrease "out"))))

#+end_src
* Development

** Languages

*** IDE Features with lsp-mode

**** lsp-mode

GitHub: [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]]

Я ипользую =lsp-mode=, чтобы сделать IDE-подобную функциональность. Прежде чем настроить =lsp-mode=, ознакомьтесь c [[https://emacs-lsp.github.io/lsp-mode/page/languages/][документацией для своего языка]].

#+begin_src emacs-lisp

  (defun et/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . et/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))

#+end_src

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] - это набор улучшений пользовательского интерфейса, созданных на основе, =lsp-mode= которые делают Emacs еще более похожим на IDE.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

**** lsp-treemacs

GitHub: [[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]]

Treemacs - файловый менеджер древовидной структуры для Emacs.

treemacs-icons-dired - позволяет использовать значки treemacs в dired буферах.

***** Commands

| command                 | key / ex command | description                                                        |
|-------------------------+------------------+--------------------------------------------------------------------|
| lsp-treemacs-symbols    | =C-x t s=        | Показать дерево символов в текущем файле                           |
| lsp-treemacs-references | -                | Показать древовидную структуру для ссылок символа под курсором     |
| lsp-treemacs-error-list | -                | Показать древовидную структуру диагностических сообщений в проекте |
|-------------------------+------------------+--------------------------------------------------------------------|

***** Settings

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

  (global-set-key (kbd "C-x t t") 'treemacs)
  (global-set-key (kbd "C-x t s") 'lsp-treemacs-symbols)

  (use-package treemacs-icons-dired
    :config (treemacs-icons-dired-mode))

#+end_src

**** lsp-ivy

GitHub: [[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]]

Упрощает поиск в коде.

***** Commands

| command                         | key / ex command | description                                                   |
|---------------------------------+------------------+---------------------------------------------------------------|
| lsp-ivy-workspace-symbol        | -                | Поиск имени символа в рабочей области текущего проекта        |
| lsp-ivy-global-workspace-symbol | -                | Поиск имени символа во всех активных рабочих областях проекта |
|---------------------------------+------------------+---------------------------------------------------------------|

***** Settings

#+begin_src emacs-lisp

  (use-package lsp-ivy)

#+end_src

*** Debugging with dap-mode

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] - это пакет для отладки в Emacs.

Документацию по настройки языков можно посмотреть [[https://emacs-lsp.github.io/dap-mode/page/configuration/][тут]].

**** Commands

| command                | key / ex command | description                       |
|------------------------+------------------+-----------------------------------|
| dap-breakpoint-toggle  | -                | поставить точку остановы          |
| dap-breakpoint-delete  | -                | удалить точку остановы            |
| dap-ui-breakpoint-list | -                | спосок всех точек остановы        |
| dap-debug              | -                | запустить отладку                 |
| dap-hydra              | -                | посмотреть как управлять отладкой |
|------------------------+------------------+-----------------------------------|

**** Settings

#+begin_src emacs-lisp

  (use-package dap-mode)

#+end_src

*** TypeScript and JavaScript

#+begin_src emacs-lisp

  ;(use-package typescript-mode
  ;  :mode "\\.ts\\'"
  ;  :hook (typescript-mode . lsp-deferred)
  ;  :config
  ;  (setq typescript-indent-level 2)
  ;  (require 'dap-node)
  ;  (dap-node-setup))

  (use-package js2-mode
    :mode "\\.jsx?\\'"
    :hook (js2-mode . lsp-deferred)
    :config
    (setq js-indent-level 2))

#+end_src

*Важная заметка!* Для =lsp-mode= работы с TypeScript (и JavaScript) вам необходимо установить языковой сервер на вашем компьютере. Если у вас установлен Node.js, самый простой способ сделать это - выполнить следующую команду:

#+begin_src shell :tangle no

  npm i -g typescript-language-server; npm i -g typescript

#+end_src

*** Python

Для Python использую =lsp-mode= и =dap-mode=.

В данной конфигурации используется [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][pyls]], по этому убедитесь что у вас установлен языковой сервер

#+begin_src sh :tangle no

  pip install --user "python-language-server[all]"
  pip install python-lsp-server

#+end_src

Также вам может понадобиться debugger и среда тестированияя pytest

#+begin_src sh :tangle no

  pip3 install --user debugpy
  pip3 install --user pytest

#+end_src

*Важная заметка!* если при использование OS Windows возникли проблемы, с нормальной работы Python при открытии файлов, попробутей сначало запустить среду Python внутри Emacs при помощи =run-python=.

#+begin_src emacs-lisp

  (use-package python-mode
    :ensure t
    :mode "\\.py\\'"
    :hook (python-mode . lsp-deferred)
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    ;; (python-shell-interpreter "python3")
    ;; (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))

#+end_src

Для =virtualenv= можно использовать =pyvenv=. Чтобы запустить используйте =pyvenv-activate=.

#+begin_src emacs-lisp

  (use-package pyvenv
    :config
    (pyvenv-mode 1))

#+end_src

*** CSharp

GitHub: [[https://github.com/emacs-csharp/csharp-mode][csharp-mode]]

Перед использованиям убедитесь что у вас установлен языковой сервер [[https://emacs-lsp.github.io/lsp-mode/page/lsp-csharp-omnisharp/][omnisharp]]. Простой способ это сделать, открыть файл с расширением =.cs= и Emacs сам предложит это сделать или =M-x: lsp-install-server= и выбрать нужный сервер.

#+begin_src emacs-lisp

  (use-package csharp-mode
    :ensure t
    :mode "\\.cs\\'"
    :hook (csharp-mode . lsp-deferred)
    :config
    (require 'dap-netcore))

#+end_src

*** Company Mode

GitHub: [[https://github.com/company-mode/company-mode][company]]

Company - это фреймворк для автозавершения текста для Emacs.

GitHub: [[https://github.com/sebastiencs/company-box][company-box]]

Фирменный интерфейс с иконками.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

*** Web mode

GitHub: [[https://github.com/fxbois/web-mode][web-mode]]

web-mode - это режим emacs для редактирования веб-шаблонов.

#+begin_src emacs-lisp

  (use-package web-mode
    :mode (("\\.css$"  . web-mode)
           ("\\.html$" . web-mode)))

#+end_src

*** JSON

=json-mode= - режим Emacs для обработки файлов JSON

GitHub: [[https://github.com/joshwnj/json-mode][json-mode]]

#+begin_src emacs-lisp

  (use-package json-mode
    :mode "\\.json\\'")

#+end_src

*** YAML

=yaml-mode= - режим Emacs для обработки файлов YAML/YML

GitHub: [[https://github.com/yoshiki/yaml-mode][yaml-mode]]

#+begin_src emacs-lisp

  (use-package yaml-mode
    :mode (("\\.yml$"  . yaml-mode)
           ("\\.yaml$" . yaml-mode)))

#+end_src

*** Makefile

=makefile-gmake-mode= - режим Emacs для обработки файлов Makefile

#+begin_src emacs-lisp

  (use-package makefile-gmake-mode
    :ensure nil
    :mode  ("Makefile.*" . makefile-gmake-mode))

#+end_src

** Projectile

GitHub: [[https://github.com/bbatsov/projectile/tree/db5748ea4a6428136769e7e50c6d0a12aa7acd8f][projectile]]

Projectile - это библиотека взаимодействия с проектом для Emacs.

#+begin_src emacs-lisp

  (use-package projectile
    :config
      (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
      (projectile-mode +1))

#+end_src

** Magit

GitHub: [[https://github.com/magit/magit][magit]]

Magit - это интерфейс системы контроля версий Git.

#+begin_src emacs-lisp

  (use-package magit
    :bind   (("C-x g" . #'magit-status)))

#+end_src

** Rainbow Delimiters

GitHub: [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]

Полезно в режимах программирования, потому что раскрашивают вложенные круглые скобки в соответствии с их глубиной вложенности.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Terminals

** Eshell

=Eshell= — это собственная реализация оболочки Emacs, написанная на Emacs Lisp.

=eshell-git-prompt= - пакет предоставляет темы приглашения Emacs Shell (Eshell).

GitHub: [[https://github.com/xuchunyang/eshell-git-prompt][eshell-git-prompt]]

#+begin_src emacs-lisp

  (defun et/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt)

  (use-package eshell
    :hook (eshell-first-time-mode . et/configure-eshell)
    :config
    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'multiline2))

#+end_src
