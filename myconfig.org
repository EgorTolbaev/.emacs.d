#+AUTHOR: Egor Tolbaev
#+TITLE: GNU Emacs Configuration

* Table of Contents                                                     :TOC_3:
- [[#about][About]]
- [[#general-settings][General settings]]
  - [[#defaults][Defaults]]
  - [[#fonts][Fonts]]
  - [[#remove-mouse-interface][Remove Mouse Interface]]
  - [[#кодировка][Кодировка]]
  - [[#парные-элементы][Парные элементы]]
  - [[#перенос-по-словам][Перенос по словам]]
  - [[#чистим-пробелы][Чистим пробелы]]
  - [[#отключить-сохранений][Отключить сохранений]]
- [[#ui][UI]]
  - [[#theme][Theme]]
  - [[#переключение-темы][Переключение темы]]
    - [[#светлая-тема][Светлая тема]]
    - [[#темная-тема][Темная тема]]
  - [[#modeline][Modeline]]
  - [[#icons][Icons]]
  - [[#org-mode][Org mode]]
    - [[#agenda][Agenda]]
    - [[#capture][Capture]]
    - [[#org-bullets][Org bullets]]
    - [[#toc-org][Toc org]]
  - [[#markdown][Markdown]]
  - [[#отображение-времени][Отображение времени]]
  - [[#размер-окна][Размер окна]]
- [[#modes][Modes]]
  - [[#ivy][IVY]]
  - [[#ivy-rich][IVY-RICH]]
  - [[#counsel][COUNSEL]]
  - [[#helpful][Helpful]]
  - [[#which-key][Which Key]]
- [[#general-packages][General packages]]
  - [[#bs][BS]]
  - [[#projectile][Projectile]]
  - [[#dashboard][Dashboard]]
  - [[#treemacs][Treemacs]]
  - [[#company][Company]]
  - [[#company-box][Company-box]]
  - [[#reverse-im][Reverse-im]]
  - [[#magit][Magit]]
  - [[#sr-speedbar][Sr-speedbar]]
  - [[#linum][Linum]]
  - [[#browser][Browser]]
    - [[#engine-mode][Engine-mode]]
- [[#programming][Programming]]
  - [[#web-mode][Web mode]]
  - [[#python][Python]]
    - [[#company-jedi][Company jedi]]
    - [[#pyvenv][Pyvenv]]
  - [[#flycheck][Flycheck]]

* About
Я решил создать свою собственную конфигурацию GNU Emacs, что бы упростить мою повседневную жизнь, добавив сценарии и полезные функции.

Для управления конфигурациями пакетов я использую пакет use-package от John Wiegley.
* General settings
** Defaults
Для лучшего взаимодействия с GNU Emacs я использую следующие значения по умолчанию.
#+BEGIN_SRC emacs-lisp
 (setq inhibit-splash-screen t)                    ; Не показывать стартовое сообщение
 (setq ingibit-startup-message t)                  ; Экран приветствия можно вызвать комбинацией C-h C-a
 (setq ring-bell-function 'ignore)                 ; Отключить звуковой сигнал
 (setq user-full-name "Egor Tolbaev")              ; Имя пользователя
 (setq user-mail-address "egor05.09.97@gmail.com") ; Email пользователя
 (blink-cursor-mode -1)                            ; Курсор не мигает
 (fset 'yes-or-no-p 'y-or-n-p)                     ; Замена yes-or-on на y-or-n
#+END_SRC
** Fonts
Использую [[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]] или Consolas еще не решил:)
#+BEGIN_SRC emacs-lisp
;;(set-face-attribute 'default nil :font "Consolas")
(set-face-attribute 'default nil :font "Source Code Pro Medium")
(set-fontset-font t 'latin "Noto Sans")
#+END_SRC
** Remove Mouse Interface
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)   ; Не показывать меню
(scroll-bar-mode -1) ; Не показывать полосу прокрутки
(tool-bar-mode -1)   ; Не показывать панель инструментов
#+END_SRC
** Кодировка
#+BEGIN_SRC emacs-lisp
(set-language-environment 'UTF-8)
(setq default-buffer-file-coding-system 'utf-8)
(setq-default coding-system-for-read    'utf-8)
(setq file-name-coding-system           'utf-8)
(set-keyboard-coding-system        'utf-8-unix)
(set-terminal-coding-system             'utf-8)
(prefer-coding-system                   'utf-8)
#+END_SRC
** Парные элементы
Теперь при вводе парного элемента типа "(" они автоматически закрываються
#+BEGIN_SRC emacs-lisp
(electric-pair-mode t)
(show-paren-mode 1)
#+END_SRC
** Перенос по словам
Слова которые не помещаются по размеру фрейма переносится на другую сторку
#+BEGIN_SRC emacs-lisp
(setq word-wrap t)
(global-visual-line-mode t)
#+END_SRC
** Чистим пробелы
При сохранение файла удаляются лишние пробелы в конце строки и файла.
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook '(lambda ()
			       (delete-trailing-whitespace)))
#+END_SRC
** Отключить сохранений
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)        ; Не нужны файлы резервных копий
(setq auto-save-list-file-name nil) ; Не нужны файлы .saves
(setq auto-save-default nil)        ; Не хочу автосохранения
#+END_SRC
* UI
** Theme
Я использую темы [[https://github.com/hlissner/emacs-doom-themes][doom-themes]] в сочетании с [[https://github.com/EgorTolbaev/.emacs.d/blob/master/myconfig.org#modeline][doom-modeline]]. Для отображения значков в doom-modeline использую [[https://github.com/EgorTolbaev/.emacs.d/blob/master/myconfig.org#icons][all-the-icons]]
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-Iosvkem))
#+END_SRC
** Переключение темы
*** Светлая тема
#+BEGIN_SRC emacs-lisp
(defun set-light-theme()
  (interactive)
  (load-theme 'doom-opera-light))
  (global-set-key (kbd "<f8>") 'set-light-theme)
#+END_SRC
*** Темная тема
#+BEGIN_SRC emacs-lisp
(defun set-night-theme()
  (interactive)
  (load-theme 'doom-Iosvkem))
  (global-set-key (kbd "<f9>") 'set-night-theme)
#+END_SRC
** Modeline
GitHub: [[https://github.com/seagle0128/doom-modeline][doom-modeline]]
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
#+END_SRC
** Icons
GitHub: [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]

Для того, чтобы значки работали, очень важно, чтобы вы установили шрифты ресурсов, включенные в этот пакет.

M-x all-the-icons-install-fonts

Для Windows эта функция предложит указать каталог для загрузки, чтобы вы могли установить их вручную.
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC
** Org mode
[[https://orgmode.org/][Org mode]] предназначен для ведения заметок, списков дел, планирования проектов и многого другого.

Описание: [[https://orgmode.org/manual/Handling-Links.html][org-store-link]], [[https://orgmode.org/manual/Capture.html][org-capture]], [[https://orgmode.org/manual/Agenda-Commands.html][org-agenda]]
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)                      ; Заметки с отметкой времени
(global-set-key (kbd "C-c l") 'org-store-link) ; Создать ссылку
(global-set-key (kbd "C-c c") 'org-capture)    ; Создать заметку
#+END_SRC
Кастомные статусы

/Статус с маркером "!" означает что нужна отметка времени/

/Статус с маркером "@" означает что нужно указать заметку/
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '((sequence "TODO(t)"
                                    "IN-PROGRESS(s)"
				    "PAUSE(p)"
                                    "NEXT(n)"
                                    "WAITING(w@/!)""|" "DONE(x!)" "CANCEL(c@)")))
#+END_SRC
*** Agenda
Для планирования задач я использую =org-agenda=

Я помещаю свои =org= файлы в [[https://www.dropbox.com/?_hp=c][Dropbox]] чтобы иметь возможность проверять свою повестку дня и обновлять ее с нескольких компьютеров и смартфонов.

Для смартфона использую [[https://github.com/orgzly/orgzly-android][Orgzly]]

/Открыть org-agenda:/ =C-c a=

/Закрыть org-agenda:/ =q=

/Отобразить за нужный период времени:/ =v=

/Grid Log:/ =l=

Также Вы можете добавить =agenda= в [[https://github.com/EgorTolbaev/.emacs.d/blob/master/myconfig.org#dashboard][dashboard]] указав в dashboard-items: (agenda)
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
(when (system-is-windows)
     (setq org-agenda-files '("c:/Users/user/Dropbox/org/tasks")))
(when (system-is-linux)
     (setq org-agenda-files '("~/Dropbox/org/tasks")))
#+END_SRC
*** Capture
Я использую  =capture= для быстрых заметок, разделяя их по категориям при помощи тегов.
#+BEGIN_SRC emacs-lisp
(when (system-is-windows)
     (set 'path_note "c:/Users/user/Dropbox/org/notes.org"))
(when (system-is-linux)
     (set 'path_note "~/Dropbox/org/notes.org"))

(setq org-capture-templates
      '(("n" "Notes" entry (file+headline path_note "Notes")
         "* TODO %? %^g \nCreated %U\n  %i\n")))

#+END_SRC
*** Org bullets
Github: [[https://github.com/sabof/org-bullets][org-bullets]]

Показывать маркеры режима организации как символы UTF-8.
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
*** Toc org
GitHub: [[https://github.com/snosov1/toc-org][toc-org]]

Удобный способ делать оглавления автоматически, просто в первом заголовке добавить тег :TOC:
#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :after org
  :hook (org-mode . toc-org-enable))
#+END_SRC
** Markdown
[[https://jblevins.org/projects/markdown-mode/][Markdown Mode for Emacs]]

Прежде чем использовать этот пакет, нужно убедиться что установлен какой то процессор Markdown

В моем конфиге это - [[https://github.com/jgm/pandoc][pandoc]]
 #+BEGIN_SRC emacs-lisp
 (use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc"))
 #+END_SRC
** Отображение времени
#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t) ; 24-часовой временной формат в mode-line
(display-time-mode t)             ; показывать часы в mode-line
(size-indication-mode t)          ; размер файла в %-ах
#+END_SRC
** Размер окна
#+BEGIN_SRC emacs-lisp
(when (window-system)
  (set-frame-size (selected-frame) 100 40))
#+END_SRC
* Modes
** IVY
[[https://github.com/abo-abo/swiper/tree/7cdde66c95d5205287e88010bc7a3a978c931db0][Ivy]] - это общий механизм завершения для Emacs. Использую в месте с [[https://github.com/EgorTolbaev/.emacs.d/blob/master/myconfig.org#ivy-rich][ivy-rich]] и [[https://github.com/EgorTolbaev/.emacs.d/blob/master/myconfig.org#counsel][counsel]]
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
#+END_SRC
** IVY-RICH
#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))
#+END_SRC
** COUNSEL
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))
#+END_SRC
** Helpful
GitHub: [[https://github.com/Wilfred/helpful][helpful]]

Helpful - это альтернатива встроенной справке Emacs, которая предоставляет гораздо больше контекстной информации.
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+END_SRC
** Which Key
GitHub: [[https://github.com/justbur/emacs-which-key][which-key]]

which-key- это второстепенный режим для Emacs, который отображает привязки клавиш после введенной вами неполной команды (префикса) во всплывающем окне.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+END_SRC
* General packages
** BS
GitHub: [[https://github.com/emacs-mirror/emacs/blob/master/lisp/bs.el][bs]]

Меню для выбора и отображения буферов
#+BEGIN_SRC emacs-lisp
(use-package bs
  :ensure t)
;; Добавим чтобы в буфере всегда был scratch
(setq bs-configurations
      '(("files" "^\\*scratch\\*" nil nil bs-visits-non-file bs-sort-buffer-interns-are-last)))
(global-set-key (kbd "<f2>") 'bs-show)
#+END_SRC
** Projectile
GitHub: [[https://github.com/bbatsov/projectile/tree/db5748ea4a6428136769e7e50c6d0a12aa7acd8f][projectile]]

Projectile - это библиотека взаимодействия с проектом для Emacs.
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
  (projectile-mode +1))
#+END_SRC
** Dashboard
GitHub: [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]]

Расширяемый стартовый экран Emacs.
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (progn
    (setq dashboard-startup-banner "~/.emacs.d/logo.png")
    (setq dashboard-items '((recents  . 5)
			    (projects . 5)))
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-center-content t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-init-info t ))
  :config
  (dashboard-setup-startup-hook))

;; Кнопки навигации
(setq dashboard-set-navigator t)
(setq dashboard-navigator-buttons
      `(
        ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
         "Homepage"
         "Browse homepage"
         (lambda (&rest _) (browse-url "https://github.com/EgorTolbaev"))))))
#+END_SRC
** Treemacs
GitHub: [[https://github.com/Alexander-Miller/treemacs][treemacs]]

Treemacs - файловый менеджер древовидной структуры для Emacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :bind   ("M-n M-n" . #'treemacs))
#+END_SRC
** Company
GitHub: [[https://github.com/company-mode/company-mode][company]]

Company - это фреймворк для автозавершения текста для Emacs.
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :init
  (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
** Company-box
GitHub: [[https://github.com/sebastiencs/company-box][company-box]]

Фирменный интерфейс с иконками.
#+BEGIN_SRC emacs-lisp
(use-package company-box
  :ensure t
  :hook   (company-mode . company-box-mode))
#+END_SRC
** Reverse-im
GitHub: [[https://github.com/emacsmirror/reverse-im][reverse-im]]

Переопределяет функциональную-клавишную-карту для предпочтительных методов ввода для перевода входных последовательностей на английский язык.
#+BEGIN_SRC emacs-lisp
(use-package reverse-im
  :ensure t
  :custom
  (reverse-im-input-methods '("russian-computer"))
  :config
  (reverse-im-mode t))
#+END_SRC
** Magit
GitHub: [[https://github.com/magit/magit][magit]]

Magit - это интерфейс системы контроля версий Git.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind   (("C-x g" . #'magit-status)))
#+END_SRC
** Sr-speedbar
GitHub: [[https://github.com/emacsorphanage/sr-speedbar/tree/77a83fb50f763a465c021eca7343243f465b4a47][sr-speedbar]]
#+BEGIN_SRC emacs-lisp
(use-package sr-speedbar
  :ensure t
  :config
  (setq sr-speedbar-right-side nil))
(global-set-key (kbd "<f12>") 'sr-speedbar-toggle)
#+END_SRC
** Linum
#+BEGIN_SRC emacs-lisp
(require 'linum)              ; вызвать Linum
(setq line-number-mode nil)   ; показать номер строки в mode-line
(global-linum-mode t)         ; показывать номера строк во всех буферах
(setq column-number-mode nil) ; показать номер столбца в mode-line
(setq linum-format " %d")     ; задаем формат нумерации строк
;; Установка фиксированной высоты чтобы нумерация не меняла размер
;; например в режиме org-mode
(eval-after-load "linum"
  '(set-face-attribute 'linum nil :height 100))
#+END_SRC
** Browser
Я решил использовать в связке с Emacs браузер, ориентированный на клавиатуру, с минимальным графическим интерфейсом [[https://github.com/qutebrowser/qutebrowser][Qutebrowser]]

При установки qutebrowser на Windows возможно потребуеться вручную добавить путь в переменную $path = C:\Program Files\qutebrowser
#+BEGIN_SRC emacs-lisp
(use-package browse-url
  :ensure nil
  :custom
  (browse-url-browser-function 'browse-url-generic)
  (browse-url-generic-program "qutebrowser"))
#+END_SRC
*** Engine-mode
Github: [[https://github.com/hrs/engine-mode/tree/e0910f141f2d37c28936c51c3c8bb8a9ca0c01d1][engine-mode]]

Удобный способ совершать поиск не выходя из Emacs
#+BEGIN_SRC emacs-lisp
(use-package engine-mode
  :defer 3
  :config
  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "g")

  (defengine google-images
    "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
    :keybinding "i")

  (defengine youtube
    "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
    :keybinding "y")
  (engine-mode t))
#+END_SRC
* Programming
** Web mode
GitHub: [[https://github.com/fxbois/web-mode][web-mode]]

web-mode - это режим emacs для редактирования веб-шаблонов.
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :mode (("\\.css$"  . web-mode)
         ("\\.html$" . web-mode)))
#+END_SRC
** Python
*** Company jedi
Github: [[https://github.com/emacsorphanage/company-jedi][company-jedi]]

Серверная часть завершения для Python JEDI.
#+BEGIN_SRC emacs-lisp
(use-package company-jedi
  :ensure t
  :config
  (add-to-list 'company-backends 'company-jedi))
#+END_SRC
*** Pyvenv
#+BEGIN_SRC emacs-lisp
(use-package pyvenv
  :ensure t
  :hook ((python-mode . pyvenv-mode)))
#+END_SRC
** Flycheck
GitHub: [[https://github.com/flycheck/flycheck][flycheck]]

Современное расширение для оперативной проверки синтаксиса для GNU Emacs
 #+BEGIN_SRC emacs-lisp
 (use-package flycheck
   :ensure t
   :config
   (global-flycheck-mode)
   (global-set-key (kbd "C-c n") 'flycheck-next-error)
   (global-set-key (kbd "C-c e") 'list-flycheck-errors))
 #+END_SRC
